{
  "typeName": "JDBCUserStoreManager",
  "typeId": "SkRCQ1VzZXJTdG9yZU1hbmFnZXI",
  "className": "org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager",
  "properties": {
    "Mandatory": [
      {
        "name": "url",
        "defaultValue": "",
        "description": "Connection URL#URL of the user store database"
      },
      {
        "name": "userName",
        "defaultValue": "",
        "description": "Connection Name#Username for the database"
      },
      {
        "name": "password",
        "defaultValue": "",
        "description": "Connection Password#Password for the database#encrypt"
      },
      {
        "name": "driverName",
        "defaultValue": "",
        "description": "Driver Name#Full qualified driver name"
      }
    ],
    "Optional": [
      {
        "name": "Disabled",
        "defaultValue": "false",
        "description": "Disabled#Whether user store is disabled"
      },
      {
        "name": "ReadOnly",
        "defaultValue": "false",
        "description": "Read-only#Indicates whether the user store of this realm operates in the user read only mode or not"
      },
      {
        "name": "ReadGroups",
        "defaultValue": "true",
        "description": "Read Groups#Specifies whether groups should be read from LDAP"
      },
      {
        "name": "WriteGroups",
        "defaultValue": "true",
        "description": "Write Groups#Indicate whether write groups enabled"
      },
      {
        "name": "UsernameJavaRegEx",
        "defaultValue": "[a-zA-Z0-9._\\-|//]{3,30}$",
        "description": "Username RegEx (Java)#A regular expression to validate user names"
      },
      {
        "name": "UsernameJavaScriptRegEx",
        "defaultValue": "^[\\S]{5,30}$",
        "description": "Username RegEx (Javascript)#The regular expression used by the font-end components for username validation"
      },
      {
        "name": "UsernameJavaRegExViolationErrorMsg",
        "defaultValue": "Username pattern policy violated.",
        "description": "Username RegEx Violation Error Message#Error message when the Username is not matched with UsernameJavaRegEx"
      },
      {
        "name": "PasswordJavaRegEx",
        "defaultValue": "^[\\S]{5,30}$",
        "description": "Password RegEx (Java)#A regular expression to validate passwords"
      },
      {
        "name": "PasswordJavaScriptRegEx",
        "defaultValue": "^[\\S]{5,30}$",
        "description": "Password RegEx (Javascript)#The regular expression used by the font-end components for password validation"
      },
      {
        "name": "PasswordJavaRegExViolationErrorMsg",
        "defaultValue": "Password pattern policy violated.",
        "description": "Password RegEx Violation Error Message#Error message when the Password is not matched with passwordJavaRegEx"
      },
      {
        "name": "RolenameJavaRegEx",
        "defaultValue": "[a-zA-Z0-9._\\-|//]{3,30}$",
        "description": "Role Name RegEx (Java)#A regular expression to validate role names"
      },
      {
        "name": "RolenameJavaScriptRegEx",
        "defaultValue": "^[\\S]{5,30}$",
        "description": "Role Name RegEx (Javascript)#The regular expression used by the font-end components for role name validation"
      },
      {
        "name": "CaseInsensitiveUsername",
        "defaultValue": "false",
        "description": "Case Insensitive Username#Whether the username is case sensitive or not"
      },
      {
        "name": "UniqueID",
        "defaultValue": "",
        "description": "#"
      }
    ],
    "Advanced": [
      {
        "name": "IsBulkImportSupported",
        "defaultValue": "false",
        "description": "Is Bulk Import Supported#Support Bulk User Import Operation for this user store"
      },
      {
        "name": "PasswordDigest",
        "defaultValue": "SHA-256",
        "description": "Password Hashing Algorithm#Password Hash method to use when storing user entries"
      },
      {
        "name": "MultiAttributeSeparator",
        "defaultValue": ",",
        "description": "Multiple Attribute Separator#This is the separator for multiple claim values"
      },
      {
        "name": "StoreSaltedPassword",
        "defaultValue": "true",
        "description": "Enable Salted Passwords#Indicates whether to salt the password"
      },
      {
        "name": "MaxUserNameListLength",
        "defaultValue": "100",
        "description": "Maximum User List Length#Maximum number of users retrieved at once"
      },
      {
        "name": "MaxRoleNameListLength",
        "defaultValue": "100",
        "description": "Maximum Role List Length#Maximum number of roles retrieved at once"
      },
      {
        "name": "UserRolesCacheEnabled",
        "defaultValue": "true",
        "description": "Enable User Role Cache#This is to indicate whether to cache the role list of a user"
      },
      {
        "name": "UserNameUniqueAcrossTenants",
        "defaultValue": "false",
        "description": "Make Username Unique Across Tenants#An attribute used for multi-tenancy"
      },
      {
        "name": "validationQuery",
        "defaultValue": "",
        "description": "validationQuery for the database#validationQuery is the SQL query that will be used to validate connections. This query MUST be an SQL SELECT statement that returns at least one row"
      },
      {
        "name": "validationInterval",
        "defaultValue": "",
        "description": "Validation Interval(time in milliseconds)#Used to avoid excess validation, only run validation at most at this frequency"
      },
      {
        "name": "defaultAutoCommit",
        "defaultValue": "",
        "description": "Default Auto commit#The default auto-commit state of connections created by this pool"
      },
      {
        "name": "defaultReadOnly",
        "defaultValue": "",
        "description": "Default Read Only#The default read-only state of connections created by this pool"
      },
      {
        "name": "defaultTransactionIsolation",
        "defaultValue": "",
        "description": "Default Transaction Isolation#The default TransactionIsolation state of connections created by this pool"
      },
      {
        "name": "defaultCatalog",
        "defaultValue": "",
        "description": "Default Catalog#The default catalog of connections created by this pool"
      },
      {
        "name": "initialSize",
        "defaultValue": "",
        "description": "Initial Size#The initial number of connections that are created when the pool is started"
      },
      {
        "name": "testOnReturn",
        "defaultValue": "false",
        "description": "Test On Return#The indication of whether objects will be validated before being returned to the pool"
      },
      {
        "name": "testOnBorrow",
        "defaultValue": "false",
        "description": "Test On Borrow#The indication of whether objects will be validated before being borrowed from the pool"
      },
      {
        "name": "validatorClassName",
        "defaultValue": "",
        "description": "Validator Class Name#The name of a class which implements the org.apache.tomcat.jdbc.pool.Validator interface and provides a no-arg constructor (may be implicit)"
      },
      {
        "name": "numTestsPerEvictionRun",
        "defaultValue": "",
        "description": "Num Tests Per Eviction Run# Property not used in tomcat-jdbc-pool"
      },
      {
        "name": "accessToUnderlyingConnectionAllowed",
        "defaultValue": "",
        "description": "Access To Underlying Connection Allowed#Property not used. Access can be achieved by calling unwrap on the pooled connection"
      },
      {
        "name": "removeAbandoned",
        "defaultValue": "false",
        "description": "Remove Abandoned#Flag to remove abandoned connections if they exceed the removeAbandonedTimeout"
      },
      {
        "name": "removeAbandonedTimeout",
        "defaultValue": "",
        "description": "Remove Abandoned Timeout#Timeout in seconds before an abandoned(in use) connection can be removed"
      },
      {
        "name": "logAbandoned",
        "defaultValue": "false",
        "description": "Log Abandoned#Flag to log stack traces for application code which abandoned a Connection"
      },
      {
        "name": "connectionProperties",
        "defaultValue": "",
        "description": "Connection Properties#The connection properties that will be sent to our JDBC driver when establishing new connections"
      },
      {
        "name": "initSQL",
        "defaultValue": "",
        "description": "Init SQL#A custom query to be run when a connection is first created"
      },
      {
        "name": "jdbcInterceptors",
        "defaultValue": "",
        "description": "JDBC Interceptors#JDBC Interceptors"
      },
      {
        "name": "jmxEnabled",
        "defaultValue": "true",
        "description": "JMX Enabled#Register the pool with JMX or not"
      },
      {
        "name": "fairQueue",
        "defaultValue": "true",
        "description": "Fiar Queue#Set to true if you wish that calls to getConnection should be treated fairly in a true FIFO fashion"
      },
      {
        "name": "abandonWhenPercentageFull",
        "defaultValue": "",
        "description": "Abandon when percentage full#Connections that have been abandoned (timed out) wont get closed and reported up unless the number of connections in use are above the percentage defined by abandonWhenPercentageFull"
      },
      {
        "name": "maxAge",
        "defaultValue": "",
        "description": "Max Age#Time in milliseconds to keep the connection"
      },
      {
        "name": "useEquals",
        "defaultValue": "true",
        "description": "Use Equals#Set to true if you wish the ProxyConnection class to use String.equals and set to false when you wish to use == when comparing method names"
      },
      {
        "name": "suspectTimeout",
        "defaultValue": "",
        "description": "Suspect Timeout#Similar to to the removeAbandonedTimeout value but instead of treating the connection as abandoned, and potentially closing the connection, this simply logs the warning if logAbandoned is set to true"
      },
      {
        "name": "validationQueryTimeout",
        "defaultValue": "",
        "description": "Validation Query Timeout#The timeout in seconds before a connection validation queries fail"
      },
      {
        "name": "alternateUsernameAllowed",
        "defaultValue": "false",
        "description": "Alternate Username Allowed#If enabled, the pool size is still managed on a global level, and not on a per schema level"
      },
      {
        "name": "commitOnReturn",
        "defaultValue": "false",
        "description": "Commit On Return#If autoCommit==false then the pool can complete the transaction by calling commit on the connection as it is returned to the pool If rollbackOnReturn==true then this attribute is ignored"
      },
      {
        "name": "rollbackOnReturn",
        "defaultValue": "false",
        "description": "Rollback On Return#If autoCommit==false then the pool can terminate the transaction by calling rollback on the connection as it is returned to the pool"
      },
      {
        "name": "CountRetrieverClass",
        "defaultValue": "org.wso2.carbon.identity.user.store.count.jdbc.JDBCUserStoreCountRetriever",
        "description": "Count Implementation#Name of the class that implements the count functionality"
      },
      {
        "name": "SelectUserSQL",
        "defaultValue": "SELECT * FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?",
        "description": "Select User SQL#"
      },
      {
        "name": "SelectUserNameSQL",
        "defaultValue": "SELECT UM_USER_ID, UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?",
        "description": "Select UserName SQL#"
      },
      {
        "name": "SelectUserIDSQL",
        "defaultValue": "SELECT UM_USER_ID, UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?",
        "description": "Select User ID SQL#"
      },
      {
        "name": "SelectUserWithIDSQL",
        "defaultValue": "SELECT UM_USER.UM_USER_ID, UM_USER.UM_USER_NAME, UM_USER.UM_USER_PASSWORD, UM_USER.UM_SALT_VALUE, UM_USER.UM_REQUIRE_CHANGE, UM_USER.UM_CHANGED_TIME FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE =? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "Select User ID SQL#"
      },
      {
        "name": "SelectUserSQLCaseInsensitive",
        "defaultValue": "SELECT * FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?",
        "description": "Select User SQL With Case Insensitive Username#"
      },
      {
        "name": "SelectUserNameSQLCaseInsensitive",
        "defaultValue": "SELECT UM_USER_ID, UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?",
        "description": "Select User Name SQL With Case Insensitive Username#"
      },
      {
        "name": "SelectUserWithIDSQLCaseInsensitive",
        "defaultValue": "SELECT UM_USER.UM_USER_ID, UM_USER.UM_USER_NAME, UM_USER.UM_USER_PASSWORD, UM_USER.UM_SALT_VALUE, UM_USER.UM_REQUIRE_CHANGE, UM_USER.UM_CHANGED_TIME FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND LOWER(UM_USER_ATTRIBUTE.UM_ATTR_VALUE) =LOWER(?) AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "Select User With ID SQL With Case Insensitive Username#"
      },
      {
        "name": "SelectUserIDFromUserNameSQL",
        "defaultValue": "SELECT UM_USER_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?",
        "description": "Select User ID From UserName SQL#"
      },
      {
        "name": "SelectUserNameFromUserIDSQL",
        "defaultValue": "SELECT UM_USER_NAME FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?",
        "description": "Select UserName From User ID SQL#"
      },
      {
        "name": "SelectUserIDFromUserNameSQLCaseInsensitive",
        "defaultValue": "SELECT UM_USER_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?",
        "description": "Select User ID From UserName SQL With Case Insensitive Username#"
      },
      {
        "name": "GetRoleListSQL",
        "defaultValue": "SELECT UM_ROLE_NAME, UM_TENANT_ID, UM_SHARED_ROLE FROM UM_ROLE WHERE UM_ROLE_NAME LIKE ? AND UM_TENANT_ID=? AND UM_SHARED_ROLE ='0' ORDER BY UM_ROLE_NAME",
        "description": "Get Role List SQL#"
      },
      {
        "name": "GetSharedRoleListSQL",
        "defaultValue": "SELECT UM_ROLE_NAME, UM_TENANT_ID, UM_SHARED_ROLE FROM UM_ROLE WHERE UM_ROLE_NAME LIKE ? AND UM_SHARED_ROLE ='1' ORDER BY UM_ROLE_NAME",
        "description": "Get Shared Role List SQP#"
      },
      {
        "name": "UserFilterSQL",
        "defaultValue": "SELECT UM_USER_NAME FROM UM_USER WHERE UM_USER_NAME LIKE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME",
        "description": "User Filter SQL#"
      },
      {
        "name": "UserFilterWithIDSQL",
        "defaultValue": "SELECT UM_USER_ID, UM_USER_NAME FROM UM_USER WHERE UM_USER_NAME LIKE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME",
        "description": "User ID Filter SQL#"
      },
      {
        "name": "UserFilterSQLWithEscape",
        "defaultValue": "SELECT UM_USER_NAME FROM UM_USER WHERE UM_USER_NAME LIKE ? ESCAPE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME",
        "description": "User Filter SQL With Escape#"
      },
      {
        "name": "UserFilterSQLCaseInsensitive",
        "defaultValue": "SELECT UM_USER_NAME FROM UM_USER WHERE LOWER(UM_USER_NAME) LIKE LOWER(?) AND UM_TENANT_ID=? ORDER BY UM_USER_NAME",
        "description": "User Filter SQL With Case Insensitive Username#"
      },
      {
        "name": "UserFilterWithIDSQLCaseInsensitive",
        "defaultValue": "SELECT UM_USER_ID, UM_USER_NAME FROM UM_USER WHERE LOWER(UM_USER_NAME) LIKE LOWER(?) AND UM_TENANT_ID=? ORDER BY UM_USER_NAME",
        "description": "User Filter With ID SQL With Case Insensitive Username#"
      },
      {
        "name": "UserFilterSQLCaseInsensitiveWithEscape",
        "defaultValue": "SELECT UM_USER_NAME FROM UM_USER WHERE LOWER(UM_USER_NAME) LIKE LOWER(?) ESCAPE ? AND UM_TENANT_ID=? ORDER BY UM_USER_NAME",
        "description": "User Filter SQL With Case Insensitive Username With Escape#"
      },
      {
        "name": "UserRoleSQL",
        "defaultValue": "SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "User Role SQL#"
      },
      {
        "name": "UserRoleWithIDSQL",
        "defaultValue": "SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_ID=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "User Role With ID SQL#"
      },
      {
        "name": "UserRoleExistSQL",
        "defaultValue": "SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=? AND UM_ROLE_NAME LIKE ?",
        "description": "User Role Exist SQL#"
      },
      {
        "name": "UserRoleExistWithIDSQL",
        "defaultValue": "SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_ID=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=? AND UM_ROLE_NAME LIKE ?",
        "description": "User Role Exist With ID SQL#"
      },
      {
        "name": "UserRoleSQLCaseInsensitive",
        "defaultValue": "SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE LOWER(UM_USER.UM_USER_NAME)=LOWER(?) AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "User Role SQL With Case Insensitive Username#"
      },
      {
        "name": "IsUserRoleExistSQLCaseInsensitive",
        "defaultValue": "SELECT UM_ROLE_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE LOWER(UM_USER.UM_USER_NAME)=LOWER(?) AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=? AND UM_ROLE_NAME LIKE ?",
        "description": "User Role Exist SQL With Case Insensitive Username#"
      },
      {
        "name": "UserSharedRoleSQL",
        "defaultValue": "SELECT UM_ROLE_NAME, UM_ROLE.UM_TENANT_ID, UM_SHARED_ROLE FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_USER.UM_USER_NAME = ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = ? ",
        "description": "User Shared Role SQL#"
      },
      {
        "name": "UserSharedRoleWithIDSQL",
        "defaultValue": "SELECT UM_ROLE_NAME, UM_ROLE.UM_TENANT_ID, UM_SHARED_ROLE FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_USER.UM_USER_ID = ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = ? ",
        "description": "User Shared Role With ID SQL#"
      },
      {
        "name": "UserSharedRoleSQLCaseInsensitive",
        "defaultValue": "SELECT UM_ROLE_NAME, UM_ROLE.UM_TENANT_ID, UM_SHARED_ROLE FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE LOWER(UM_USER.UM_USER_NAME) = LOWER(?) AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = ? ",
        "description": "User Shared Role SQL With Case Insensitive Username#"
      },
      {
        "name": "IsRoleExistingSQL",
        "defaultValue": "SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?",
        "description": "Is Role Existing SQL#"
      },
      {
        "name": "GetUserListOfRoleSQL",
        "defaultValue": "SELECT UM_USER_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_ROLE.UM_ROLE_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "Get User List Of Role SQL#"
      },
      {
        "name": "GetUserListOfRoleFilterSQL",
        "defaultValue": "SELECT UM_USER_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_NAME LIKE ? AND UM_ROLE.UM_ROLE_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "Get User List Of Role Filter SQL#"
      },
      {
        "name": "GetUserListOfRoleFilterWithIDSQL",
        "defaultValue": "SELECT UM_USER.UM_USER_ID, UM_USER.UM_USER_NAME FROM UM_USER_ROLE, UM_ROLE, UM_USER WHERE UM_USER.UM_USER_NAME LIKE ? AND UM_ROLE.UM_ROLE_NAME=? AND UM_USER.UM_ID=UM_USER_ROLE.UM_USER_ID AND UM_ROLE.UM_ID=UM_USER_ROLE.UM_ROLE_ID AND UM_USER_ROLE.UM_TENANT_ID=? AND UM_ROLE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "Get User List Of Role Filter SQL With ID#"
      },
      {
        "name": "GetUserListOfSharedRoleSQL",
        "defaultValue": "SELECT UM_USER_NAME FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_ROLE.UM_ROLE_NAME= ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID",
        "description": "Get User List Of Shared Role SQL#"
      },
      {
        "name": "GetUserListOfSharedRoleFilterSQL",
        "defaultValue": "SELECT UM_USER_NAME FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_USER.UM_USER_NAME LIKE ? AND UM_ROLE.UM_ROLE_NAME= ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID",
        "description": "Get User List Of Shared Role Filter SQL#"
      },
      {
        "name": "GetUserListOfSharedRoleFilterWithIDSQL",
        "defaultValue": "SELECT UM_USER.UM_USER_ID, UM_USER.UM_USER_NAME FROM UM_SHARED_USER_ROLE INNER JOIN UM_USER ON UM_SHARED_USER_ROLE.UM_USER_ID = UM_USER.UM_ID INNER JOIN UM_ROLE ON UM_SHARED_USER_ROLE.UM_ROLE_ID = UM_ROLE.UM_ID WHERE UM_USER.UM_USER_NAME LIKE ? AND UM_ROLE.UM_ROLE_NAME= ? AND UM_SHARED_USER_ROLE.UM_USER_TENANT_ID = UM_USER.UM_TENANT_ID AND UM_SHARED_USER_ROLE.UM_ROLE_TENANT_ID = UM_ROLE.UM_TENANT_ID",
        "description": "Get User List Of Shared Role Filter With ID SQL#"
      },
      {
        "name": "IsUserExistingSQL",
        "defaultValue": "SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?",
        "description": "Is User Existing SQL#"
      },
      {
        "name": "IsUserExistingWithIDSQL",
        "defaultValue": "SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?",
        "description": "Is User Existing SQL With ID#"
      },
      {
        "name": "IsUserNameExistingSQL",
        "defaultValue": "SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?",
        "description": "Is User name Existing SQL#"
      },
      {
        "name": "IsUserExistingSQLCaseInsensitive",
        "defaultValue": "SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?",
        "description": "Is User Existing SQL With Case Insensitive Username#"
      },
      {
        "name": "IsUserExistingSQLCaseInsensitive",
        "defaultValue": "SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?",
        "description": "Is User name Existing SQL With Case Insensitive Username#"
      },
      {
        "name": "GetUserPropertiesForProfileSQL",
        "defaultValue": "SELECT UM_ATTR_NAME, UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND UM_USER.UM_USER_NAME=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "Get User Properties for Profile SQL#"
      },
      {
        "name": "GetUserPropertiesForProfileWithIDSQL",
        "defaultValue": "SELECT UM_ATTR_NAME, UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND UM_USER.UM_USER_ID=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "Get User Properties for Profile SQL With ID#"
      },
      {
        "name": "GetUserPropertiesForProfileSQLCaseInsensitive",
        "defaultValue": "SELECT UM_ATTR_NAME, UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND LOWER(UM_USER.UM_USER_NAME)=LOWER(?) AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "Get User Properties for Profile SQL With Case Insensitive Username#"
      },
      {
        "name": "GetUserPropertyForProfileSQL",
        "defaultValue": "SELECT UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND UM_USER.UM_USER_NAME=? AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "Get User Property for Profile SQL#"
      },
      {
        "name": "GetUserPropertyForProfileWithIDSQL",
        "defaultValue": "SELECT UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND UM_USER.UM_USER_ID=? AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "Get User Property for Profile With ID SQL#"
      },
      {
        "name": "GetUserPropertyForProfileSQLCaseInsensitive",
        "defaultValue": "SELECT UM_ATTR_VALUE FROM UM_USER_ATTRIBUTE, UM_USER WHERE UM_USER.UM_ID = UM_USER_ATTRIBUTE.UM_USER_ID AND LOWER(UM_USER.UM_USER_NAME)=LOWER(?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "Get User Property for Profile SQL With Case Insensitive Username#"
      },
      {
        "name": "GetUserLisForPropertySQL",
        "defaultValue": "SELECT DISTINCT UM_USER_NAME FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE LIKE ? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "Get User List for Property SQL#"
      },
      {
        "name": "GetUserLisForPropertyWithIDSQL",
        "defaultValue": "SELECT DISTINCT UM_USER.UM_USER_ID FROM UM_USER, UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID = UM_USER.UM_ID AND UM_USER_ATTRIBUTE.UM_ATTR_NAME =? AND UM_USER_ATTRIBUTE.UM_ATTR_VALUE LIKE ? AND UM_USER_ATTRIBUTE.UM_PROFILE_ID=? AND UM_USER_ATTRIBUTE.UM_TENANT_ID=? AND UM_USER.UM_TENANT_ID=?",
        "description": "Get User List for Property With ID SQL#"
      },
      {
        "name": "GetProfileNamesSQL",
        "defaultValue": "SELECT DISTINCT UM_PROFILE_ID FROM UM_USER_ATTRIBUTE WHERE UM_TENANT_ID=?",
        "description": "Get Profile Names SQL#"
      },
      {
        "name": "GetUserProfileNamesSQL",
        "defaultValue": "SELECT DISTINCT UM_PROFILE_ID FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "Get User Profile Names SQL#"
      },
      {
        "name": "GetUserProfileNamesWithIDSQL",
        "defaultValue": "SELECT DISTINCT UM_PROFILE_ID FROM UM_USER_ATTRIBUTE WHERE UM_USER_ATTRIBUTE.UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "Get User Profile Names SQL With ID#"
      },
      {
        "name": "GetUserProfileNamesSQLCaseInsensitive",
        "defaultValue": "SELECT DISTINCT UM_PROFILE_ID FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "Get User Profile Names SQL With Case Insensitive Username#"
      },
      {
        "name": "GetUserIDFromUserNameSQL",
        "defaultValue": "SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?",
        "description": "Get User ID From Username SQL#"
      },
      {
        "name": "GetUserIDFromUserNameWithIDSQL",
        "defaultValue": "SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?",
        "description": "Get User ID From Username SQL With ID#"
      },
      {
        "name": "GetUserIDFromUserNameSQLCaseInsensitive",
        "defaultValue": "SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?",
        "description": "Get User ID From Username SQL With Case Insensitive Username#"
      },
      {
        "name": "GetUserNameFromTenantIDSQL",
        "defaultValue": "SELECT UM_USER_NAME FROM UM_USER WHERE UM_TENANT_ID=?",
        "description": "Get Username From Tenant ID SQL#"
      },
      {
        "name": "GetTenantIDFromUserNameSQL",
        "defaultValue": "SELECT UM_TENANT_ID FROM UM_USER WHERE UM_USER_NAME=?",
        "description": "Get Tenant ID From Username SQL#"
      },
      {
        "name": "GetTenantIDFromUserNameSQLCaseInsensitive",
        "defaultValue": "SELECT UM_TENANT_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?)",
        "description": "Get Tenant ID From Username SQL With Case Insensitive Username#"
      },
      {
        "name": "AddUserSQL",
        "defaultValue": "INSERT INTO UM_USER (UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME, UM_TENANT_ID) VALUES (?, ?, ?, ?, ?, ?)",
        "description": "Add User SQL#"
      },
      {
        "name": "AddUserWithIDSQL",
        "defaultValue": "INSERT INTO UM_USER (UM_USER_ID, UM_USER_NAME, UM_USER_PASSWORD, UM_SALT_VALUE, UM_REQUIRE_CHANGE, UM_CHANGED_TIME, UM_TENANT_ID) VALUES (?, ?, ?, ?, ?, ?, ?)",
        "description": "Add User With ID SQL#"
      },
      {
        "name": "AddUserToRoleSQL",
        "defaultValue": "INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?), ?)",
        "description": "Add User To Role SQL#"
      },
      {
        "name": "AddUserToRoleWithIDSQL",
        "defaultValue": "INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?), ?)",
        "description": "Add User To Role With ID SQL#"
      },
      {
        "name": "AddUserToRoleSQLCaseInsensitive",
        "defaultValue": "INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?), ?)",
        "description": "Add User To Role SQL With Case Insensitive Username#"
      },
      {
        "name": "AddRoleSQL",
        "defaultValue": "INSERT INTO UM_ROLE (UM_ROLE_NAME, UM_TENANT_ID) VALUES (?, ?)",
        "description": "Add Role SQL#"
      },
      {
        "name": "AddSharedRoleSQL",
        "defaultValue": "UPDATE UM_ROLE SET UM_SHARED_ROLE = ? WHERE UM_ROLE_NAME = ? AND UM_TENANT_ID = ?",
        "description": "Add Shared Role SQL#"
      },
      {
        "name": "AddRoleToUserSQL",
        "defaultValue": "INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), ?)",
        "description": "Add Role To User SQL#"
      },
      {
        "name": "AddRoleToUserWithIDSQL",
        "defaultValue": "INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?), ?)",
        "description": "Add Role To User With ID SQL#"
      },
      {
        "name": "AddSharedRoleToUserSQL",
        "defaultValue": "INSERT INTO UM_SHARED_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_USER_TENANT_ID, UM_ROLE_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), ?, ?)",
        "description": "Add Shared Role To User SQL#"
      },
      {
        "name": "AddSharedRoleToUserWithIDSQL",
        "defaultValue": "INSERT INTO UM_SHARED_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_USER_TENANT_ID, UM_ROLE_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?), ?, ?)",
        "description": "Add Shared Role To User With ID SQL#"
      },
      {
        "name": "AddSharedRoleToUserSQLCaseInsensitive",
        "defaultValue": "INSERT INTO UM_SHARED_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_USER_TENANT_ID, UM_ROLE_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?), (SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?), ?, ?)",
        "description": "Add Shared Role To User SQL With Case Insensitive Username#"
      },
      {
        "name": "RemoveUserFromSharedRoleSQL",
        "defaultValue": "DELETE FROM UM_SHARED_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_USER_TENANT_ID=? AND UM_ROLE_TENANT_ID = ?",
        "description": "Remove User From Shared Roles SQL#"
      },
      {
        "name": "RemoveUserFromSharedRoleWithIDSQL",
        "defaultValue": "DELETE FROM UM_SHARED_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_USER_TENANT_ID=? AND UM_ROLE_TENANT_ID = ?",
        "description": "Remove User From Shared Roles With ID SQL#"
      },
      {
        "name": "RemoveUserFromRoleSQLCaseInsensitive",
        "defaultValue": "DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "Remove User From Role SQL With Case Insensitive Username#"
      },
      {
        "name": "RemoveUserFromRoleSQL",
        "defaultValue": "DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "Remove User From Role SQL#"
      },
      {
        "name": "RemoveUserFromRoleWithIDSQL",
        "defaultValue": "DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "Remove User From Role With ID SQL#"
      },
      {
        "name": "RemoveUserFromRoleSQLCaseInsensitive",
        "defaultValue": "DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "Remove User From Role SQL With Case Insensitive Username#"
      },
      {
        "name": "RemoveRoleFromUserSQL",
        "defaultValue": "DELETE FROM UM_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "Remove Role From User SQL#"
      },
      {
        "name": "RemoveRoleFromUserWithIDSQL",
        "defaultValue": "DELETE FROM UM_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "Remove Role From User With ID SQL#"
      },
      {
        "name": "RemoveRoleFromUserSQLCaseInsensitive",
        "defaultValue": "DELETE FROM UM_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "Remove Role From User SQL With Case Insensitive Username#"
      },
      {
        "name": "DeleteRoleSQL",
        "defaultValue": "DELETE FROM UM_ROLE WHERE UM_ROLE_NAME = ? AND UM_TENANT_ID=?",
        "description": "Delete Roles SQL#"
      },
      {
        "name": "OnDeleteRoleRemoveUserRoleMappingSQL",
        "defaultValue": "DELETE FROM UM_USER_ROLE WHERE UM_ROLE_ID=(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "On Delete Role Remove User Role Mapping SQL#"
      },
      {
        "name": "DeleteUserSQL",
        "defaultValue": "DELETE FROM UM_USER WHERE UM_USER_NAME = ? AND UM_TENANT_ID=?",
        "description": "Delete User SQL#"
      },
      {
        "name": "DeleteUserSQLCaseInsensitive",
        "defaultValue": "DELETE FROM UM_USER WHERE LOWER(UM_USER_NAME) = LOWER(?) AND UM_TENANT_ID=?",
        "description": "Delete User SQL With Case Insensitive Username#"
      },
      {
        "name": "OnDeleteUserRemoveUserRoleMappingSQL",
        "defaultValue": "DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "On Delete User Remove User Role Mapping SQL#"
      },
      {
        "name": "OnDeleteUserRemoveUserRoleMappingWithIDSQL",
        "defaultValue": "DELETE FROM UM_USER_ROLE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "On Delete User Remove User Role Mapping SQL With ID#"
      },
      {
        "name": "CountUsersWithClaimSQL",
        "defaultValue": "SELECT COUNT(UM_USER_ID) AS RESULT FROM UM_USER_ATTRIBUTE WHERE UM_ATTR_NAME = ? AND UM_TENANT_ID = ? AND UM_ATTR_VALUE LIKE ? AND UM_PROFILE_ID = ?",
        "description": "Count Users With Claim SQL#"
      },
      {
        "name": "CountInternalRolesSQL",
        "defaultValue": "SELECT COUNT(UM_ID) AS RESULT FROM UM_HYBRID_ROLE WHERE UM_ROLE_NAME NOT LIKE 'Application%' AND UM_ROLE_NAME LIKE ? AND UM_TENANT_ID = ?",
        "description": "Count Internal Roles SQL#"
      },
      {
        "name": "CountApplicationRolesSQL",
        "defaultValue": "SELECT COUNT(UM_ID) AS RESULT FROM UM_HYBRID_ROLE WHERE UM_ROLE_NAME LIKE ? AND UM_TENANT_ID = ?",
        "description": "Count Application Roles SQL#"
      },
      {
        "name": "CountRolesSQL",
        "defaultValue": "SELECT COUNT(UM_ROLE_NAME) AS RESULT FROM UM_ROLE WHERE UM_ROLE_NAME LIKE ? AND UM_TENANT_ID = ?",
        "description": "Count Roles SQL#"
      },
      {
        "name": "CountUsersSQL",
        "defaultValue": "SELECT COUNT(UM_USER_NAME) AS RESULT FROM UM_USER WHERE UM_USER_NAME LIKE ? AND UM_TENANT_ID = ?",
        "description": "Count Users SQL#"
      },
      {
        "name": "OnDeleteUserRemoveUserAttributeSQL",
        "defaultValue": "DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "On Delete User Remove User Attribute SQL#"
      },
      {
        "name": "OnDeleteUserRemoveUserAttributeWithIDSQL",
        "defaultValue": "DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "On Delete User Remove User Attribute SQL With ID#"
      },
      {
        "name": "DeleteUserWithIDSQL",
        "defaultValue": "DELETE FROM UM_USER WHERE UM_USER_ID = ? AND UM_TENANT_ID=?",
        "description": "Delete User With ID#"
      },
      {
        "name": "OnDeleteUserRemoveUserAttributeSQLCaseInsensitive",
        "defaultValue": "DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_TENANT_ID=?",
        "description": "On Delete User Remove User Attribute SQL With Case Insensitive Username#"
      },
      {
        "name": "UpdateUserPasswordSQL",
        "defaultValue": "UPDATE UM_USER SET UM_USER_PASSWORD= ?, UM_SALT_VALUE=?, UM_REQUIRE_CHANGE=?, UM_CHANGED_TIME=? WHERE UM_USER_NAME= ? AND UM_TENANT_ID=?",
        "description": "Update User Password SQL#"
      },
      {
        "name": "UpdateUserPasswordWithIDSQL",
        "defaultValue": "UPDATE UM_USER SET UM_USER_PASSWORD= ?, UM_SALT_VALUE=?, UM_REQUIRE_CHANGE=?, UM_CHANGED_TIME=? WHERE UM_USER_ID= ? AND UM_TENANT_ID=?",
        "description": "Update User Password With ID SQL#"
      },
      {
        "name": "UpdateUserPasswordSQLCaseInsensitive",
        "defaultValue": "UPDATE UM_USER SET UM_USER_PASSWORD= ?, UM_SALT_VALUE=?, UM_REQUIRE_CHANGE=?, UM_CHANGED_TIME=? WHERE LOWER(UM_USER_NAME)= LOWER(?) AND UM_TENANT_ID=?",
        "description": "Update User Password SQL With Case Insensitive Username#"
      },
      {
        "name": "UpdateRoleNameSQL",
        "defaultValue": "UPDATE UM_ROLE set UM_ROLE_NAME=? WHERE UM_ROLE_NAME = ? AND UM_TENANT_ID=?",
        "description": "Update Role Name SQL#"
      },
      {
        "name": "AddUserPropertySQL",
        "defaultValue": "INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), ?, ?, ?, ?)",
        "description": "Add User Property SQL#"
      },
      {
        "name": "AddUserPropertyWithIDSQL",
        "defaultValue": "INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) VALUES ((SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?), ?, ?, ?, ?)",
        "description": "Add User Property With ID SQL#"
      },
      {
        "name": "UpdateUserPropertySQL",
        "defaultValue": "UPDATE UM_USER_ATTRIBUTE SET UM_ATTR_VALUE=? WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?",
        "description": "Update User Property SQL#"
      },
      {
        "name": "UpdateUserPropertyWithIDSQL",
        "defaultValue": "UPDATE UM_USER_ATTRIBUTE SET UM_ATTR_VALUE=? WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?",
        "description": "Update User Property With ID SQL#"
      },
      {
        "name": "UpdateUserPropertySQLCaseInsensitive",
        "defaultValue": "UPDATE UM_USER_ATTRIBUTE SET UM_ATTR_VALUE=? WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?",
        "description": "Update User Property SQL With Case Insensitive Username#"
      },
      {
        "name": "DeleteUserPropertySQL",
        "defaultValue": "DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?",
        "description": "Delete User Property SQL#"
      },
      {
        "name": "DeleteUserPropertyWWithIDSQL",
        "defaultValue": "DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=? AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?",
        "description": "Delete User Property With ID SQL#"
      },
      {
        "name": "DeleteUserPropertySQLCaseInsensitive",
        "defaultValue": "DELETE FROM UM_USER_ATTRIBUTE WHERE UM_USER_ID=(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?) AND UM_ATTR_NAME=? AND UM_PROFILE_ID=? AND UM_TENANT_ID=?",
        "description": "Delete User Property SQL With Case Insensitive Username#"
      },
      {
        "name": "UserNameUniqueAcrossTenantsSQL",
        "defaultValue": "SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=?",
        "description": "User Name Unique Across Tenant SQL#"
      },
      {
        "name": "UserIDUniqueAcrossTenantsSQLWithID",
        "defaultValue": "SELECT UM_ID FROM UM_USER WHERE UM_USER_ID=?",
        "description": "User ID Unique Across Tenant SQL With ID#"
      },
      {
        "name": "UserNameUniqueAcrossTenantsSQLWithID",
        "defaultValue": "SELECT UM_ID FROM UM_USER_ATTRIBUTE WHERE UM_ATTR_NAME=? AND UM_ATTR_VALUE=?",
        "description": "User Name Unique Across Tenant SQL With ID#"
      },
      {
        "name": "UserNameUniqueAcrossTenantsSQLCaseInsensitive",
        "defaultValue": "SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?)",
        "description": "User Name Unique Across Tenant SQL With Case Insensitive Username#"
      },
      {
        "name": "UserNameUniqueAcrossTenantsSQLCaseInsensitiveWithID",
        "defaultValue": "SELECT UM_ID FROM UM_USER_ATTRIBUTE WHERE UM_ATTR_NAME=? AND LOWER(UM_ATTR_VALUE)=LOWER(?)",
        "description": "User Name Unique Across Tenant SQL With Case Insensitive Username With ID#"
      },
      {
        "name": "IsDomainExistingSQL",
        "defaultValue": "SELECT UM_DOMAIN_ID FROM UM_DOMAIN WHERE UM_DOMAIN_NAME=? AND UM_TENANT_ID=?",
        "description": "Is Domain Existing SQL#"
      },
      {
        "name": "AddDomainSQL",
        "defaultValue": "INSERT INTO UM_DOMAIN (UM_DOMAIN_NAME, UM_TENANT_ID) VALUES (?, ?)",
        "description": "Add Domain SQL#"
      },
      {
        "name": "AddUserToRoleSQL-mssql",
        "defaultValue": "INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(?)",
        "description": "Add User To Role SQL (MSSQL)#"
      },
      {
        "name": "AddRoleToUserSQL-mssql",
        "defaultValue": "INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), (?)",
        "description": "Add Role To User SQL (MSSQL)#"
      },
      {
        "name": "AddUserPropertySQL-mssql",
        "defaultValue": "INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?), (?), (?), (?), (?)",
        "description": "Add User Property (MSSQL)#"
      },
      {
        "name": "AddUserToRoleSQLCaseInsensitive-mssql",
        "defaultValue": "INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(?)",
        "description": "Add User To Role SQL With Case Insensitive Username (MSSQL)#"
      },
      {
        "name": "AddRoleToUserSQLCaseInsensitive-mssql",
        "defaultValue": "INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_ROLE WHERE UM_ROLE_NAME=? AND UM_TENANT_ID=?),(SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?), (?)",
        "description": "Add Role To User SQL With Case Insensitive Username (MSSQL)#"
      },
      {
        "name": "AddUserPropertySQLCaseInsensitive-mssql",
        "defaultValue": "INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) SELECT (SELECT UM_ID FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?), (?), (?), (?), (?)",
        "description": "Add User Property With Case Insensitive Username (MSSQL)#"
      },
      {
        "name": "AddUserToRoleSQL-openedge",
        "defaultValue": "INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) SELECT UU.UM_ID, UR.UM_ID, ? FROM UM_USER UU, UM_ROLE UR WHERE UU.UM_USER_NAME=? AND UU.UM_TENANT_ID=? AND UR.UM_ROLE_NAME=? AND UR.UM_TENANT_ID=?",
        "description": "Add User To Role SQL (OpenEdge)#"
      },
      {
        "name": "AddRoleToUserSQL-openedge",
        "defaultValue": "INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) SELECT UR.UM_ID, UU.UM_ID, ? FROM UM_ROLE UR, UM_USER UU WHERE UR.UM_ROLE_NAME=? AND UR.UM_TENANT_ID=? AND UU.UM_USER_NAME=? AND UU.UM_TENANT_ID=?",
        "description": "Add Role To User SQL (OpenEdge)#"
      },
      {
        "name": "AddUserPropertySQL-openedge",
        "defaultValue": "INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) SELECT UM_ID, ?, ?, ?, ? FROM UM_USER WHERE UM_USER_NAME=? AND UM_TENANT_ID=?",
        "description": "Add User Property (OpenEdge)#"
      },
      {
        "name": "AddUserToRoleSQLCaseInsensitive-openedge",
        "defaultValue": "INSERT INTO UM_USER_ROLE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID) SELECT UU.UM_ID, UR.UM_ID, ? FROM UM_USER UU, UM_ROLE UR WHERE LOWER(UU.UM_USER_NAME)=LOWER(?) AND UU.UM_TENANT_ID=? AND UR.UM_ROLE_NAME=? AND UR.UM_TENANT_ID=?",
        "description": "Add User To Role SQL With Case Insensitive Username (OpenEdge)#"
      },
      {
        "name": "AddRoleToUserSQLCaseInsensitive-openedge",
        "defaultValue": "INSERT INTO UM_USER_ROLE (UM_ROLE_ID, UM_USER_ID, UM_TENANT_ID) SELECT UR.UM_ID, UU.UM_ID, ? FROM UM_ROLE UR, UM_USER UU WHERE UR.UM_ROLE_NAME=? AND UR.UM_TENANT_ID=? AND LOWER(UU.UM_USER_NAME)=LOWER(?) AND UU.UM_TENANT_ID=?",
        "description": "Add Role To User SQL With Case Insensitive Username (OpenEdge)#"
      },
      {
        "name": "AddUserPropertySQLCaseInsensitive-openedge",
        "defaultValue": "INSERT INTO UM_USER_ATTRIBUTE (UM_USER_ID, UM_ATTR_NAME, UM_ATTR_VALUE, UM_PROFILE_ID, UM_TENANT_ID) SELECT UM_ID, ?, ?, ?, ? FROM UM_USER WHERE LOWER(UM_USER_NAME)=LOWER(?) AND UM_TENANT_ID=?",
        "description": "Add User Property With Case Insensitive Username (OpenEdge)#"
      },
      {
        "name": "ClaimOperationsSupported",
        "defaultValue": "true",
        "description": "Claim Operations Supported#Whether the userstore supports claim read and write"
      }
    ]
  }
}
