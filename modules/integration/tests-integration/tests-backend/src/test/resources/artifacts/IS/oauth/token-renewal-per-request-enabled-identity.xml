<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
~ Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~ http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
 -->

<Server xmlns="http://wso2.org/projects/carbon/carbon.xml">

    <JDBCPersistenceManager>
        <DataSource>
            <!-- Include a data source name (jndiConfigName) from the set of data
                sources defined in master-datasources.xml -->
            <Name>jdbc/WSO2CarbonDB</Name>
        </DataSource>
        <!-- If the identity database is created from another place and if it is
            required to skip schema initialization during the server start up, set the
            following property to "true". -->
        <!-- <SkipDBSchemaCreation>false</SkipDBSchemaCreation> -->
        <SessionDataPersist>
            <Enable>{{session.data.persist.enable}}</Enable>
            <Temporary>{{session.data.persist.temp_data}}</Temporary>
            <PoolSize>{{session.data.persist.db_pool_size}}</PoolSize>
            <SessionDataCleanUp>
                {% if "expired_data" in session.data.cleanup.enable_for %}
                <Enable>true</Enable>
                {% else %}
                <Enable>false</Enable>
                {% endif %}
                <CleanUpTimeout>{{session.data.cleanup.expired_data.expiry_time_mins}}</CleanUpTimeout>
                <CleanUpPeriod>{{session.data.cleanup.expired_data.frequency_mins}}</CleanUpPeriod>
                <!--Instead of deleting all the records at once, we are deleting the records in chunks to prevent the -->
                <!--possible deadlock and lock scenarios. The following property defines the chunk size.-->
                <DeleteChunkSize>{{session.data.cleanup.expired_data.in_chunks_of}}</DeleteChunkSize>
            </SessionDataCleanUp>
            <OperationDataCleanUp>
                {% if "invalidated_data" in session.data.cleanup.enable_for %}
                <Enable>true</Enable>
                {% else %}
                <Enable>false</Enable>
                {% endif %}
            </OperationDataCleanUp>
            <TempDataCleanup>
                <!-- Enabling separated cleanup for temporary authentication context data -->
                {% if "temp_data" in session.data.cleanup.enable_for %}
                <Enable>true</Enable>
                {% else %}
                <Enable>false</Enable>
                {% endif %}
                <!-- When PoolZize > 0, temporary data which have no usage after the authentication flow will be deleted immediately
                 When PoolZise = 0, data will be deleted only by the scheduled cleanup task-->
                <PoolSize>{{session.data.cleanup.temp_data.db_pool_size}}</PoolSize>
                <!-- All temporary authentication context data older than CleanUpTimeout value are considered as expired
                and would be deleted during cleanup task -->
                <CleanUpTimeout>{{session.data.cleanup.temp_data.expiry_time_mins}}</CleanUpTimeout>
            </TempDataCleanup>
        </SessionDataPersist>
    </JDBCPersistenceManager>

    <!-- Time configurations are in minutes -->
    <TimeConfig>
        <SessionIdleTimeout>{{session.timeout.idle_session_timeout_mins}}</SessionIdleTimeout>
        <RememberMeTimeout>{{session.timeout.remember_me_session_timeout_mins}}</RememberMeTimeout>
    </TimeConfig>

    <!-- Security configurations -->
    <Security>
        <!-- The directory under which all other KeyStore files will be stored -->
        <KeyStoresDir>{{key_mgt.keystore_dir}}</KeyStoresDir>
        <KeyManagerType>{{key_mgt.key_manager_type}}</KeyManagerType>
        <TrustManagerType>{{key_mgt.trust_manager_type}}</TrustManagerType>
    </Security>

    <Identity>
        <IssuerPolicy>{{identity.issuer_policy}}</IssuerPolicy>
        <TokenValidationPolicy>{{identity.token_validation_policy}}</TokenValidationPolicy>
        <BlackList></BlackList>
        <WhiteList></WhiteList>
        <System>
            <KeyStore></KeyStore>
            <StorePass></StorePass>
        </System>
    </Identity>

    <OpenID>
        <!--
            Default values for OpenIDServerUrl and OpenIDUSerPattern are built in following format
            https://<HostName>:<MgtTrpProxyPort except 443>/<ProxyContextPath>/<context>
            If above format doesn't satisfy uncomment the following configs and explicitly configure the values
         -->
        <OpenIDServerUrl>{{openid.server_url}}</OpenIDServerUrl>
        <OpenIDUserPattern>{{openid.user_pattern}}</OpenIDUserPattern>
        <OpenIDLoginUrl>{{openid.login_url}}</OpenIDLoginUrl>
        <!-- If the users must be prompted for approval -->
        <OpenIDSkipUserConsent>{{openid.skip_user_consent}}</OpenIDSkipUserConsent>
        <!-- Expiry time of the OpenID RememberMe token in minutes -->
        <OpenIDRememberMeExpiry>{{openid.remember_me_expiry_time_mins}}</OpenIDRememberMeExpiry>
        <!-- To enable or disable openid dumb mode -->
        <DisableOpenIDDumbMode>{{openid.disable_dumb_mode}}</DisableOpenIDDumbMode>
        <!--
               OpenID private association store is configurable from following configs.
               It includes two new replication stores,
                       i.   OpenIDServerAssociationStore (Default association store)
                       ii.  PrivateAssociationCryptoStore
                       iii. PrivateAssociationReplicationStore
        -->

        <!-- Specify full qualified class name of the class which going to use as private association store -->
        <!--
		<OpenIDPrivateAssociationStoreClass>org.wso2.carbon.identity.provider.openid.PrivateAssociationCryptoStore</OpenIDPrivateAssociationStoreClass>
	-->

        <!-- The expiration time (in minutes) for the OpenID association -->
        <!--
		<OpenIDAssociationExpiryTime>15</OpenIDAssociationExpiryTime>
	-->

        <!-- Configs specific to PrivateAssociationCryptoStore -->
        <!-- Server secret. This value should be the same in all nodes in the cluster -->
        <!--
		<OpenIDPrivateAssociationServerKey>qewlj324lmasc</OpenIDPrivateAssociationServerKey>
	-->

        <!-- Configs specific to PrivateAssociationCryptoStore -->
        <!-- This enable private association cleanup task which cleans expired private associations -->
        <!--
		<EnableOpenIDAssociationCleanupTask>true</EnableOpenIDAssociationCleanupTask>
	-->
        <!-- Time Period (in minutes) that cleanup task would run -->
        <!--
		<OpenIDAssociationCleanupPeriod>15</OpenIDAssociationCleanupPeriod>
	-->
    </OpenID>

    <OAuth>
        <!-- Token cleanup feature config to clean IDN_OAUTH2_ACCESS_TOKEN table-->
        <TokenCleanup>
            <!--If true old access token cleaning feature is enabled -->
            <EnableTokenCleanup>{{oauth.token.cleanup.enable}}</EnableTokenCleanup>
            <!--If true  old access token retained in audit table  -->
            <RetainOldAccessToken>{{oauth.token.cleanup.backup_for_auditing}}</RetainOldAccessToken>
        </TokenCleanup>
        <!-- Specify the Token issuer class to be used.
             Default: org.wso2.carbon.identity.oauth2.token.OauthTokenIssuerImpl.
             Applicable values: org.wso2.carbon.identity.oauth2.token.JWTTokenIssuer
        -->
        <!--<IdentityOAuthTokenGenerator>org.wso2.carbon.identity.oauth2.token.JWTTokenIssuer</IdentityOAuthTokenGenerator>-->

        <!-- True, if access token alias is stored in the database instead of access token.
             Eg. token alias and token is same when default AccessTokenValueGenerator is used.
             When JWTTokenIssuer is used, jti is used as the token alias
             Default: true.
             Applicable values: true,false
        -->
        <!--<PersistAccessTokenAlias>false</PersistAccessTokenAlias>-->

        <!-- This configuration is used to specify the access token value generator.
             Default: org.apache.oltu.oauth2.as.issuer.UUIDValueGenerator
             Applicable values: org.apache.oltu.oauth2.as.issuer.UUIDValueGenerator,
                                org.apache.oltu.oauth2.as.issuer.MD5Generator,
                                org.wso2.carbon.identity.oauth.tokenvaluegenerator.SHA256Generator-->
        <!--<AccessTokenValueGenerator>org.wso2.carbon.identity.oauth.tokenvaluegenerator.SHA256Generator</AccessTokenValueGenerator>-->

        <!-- This configuration is used to specify whether the Service Provider tenant domain should be used when generating
             access token. Otherwise user domain will be used. Currently this value is only supported by the JWTTokenIssuer.-->
        <!--<UseSPTenantDomain>True</UseSPTenantDomain>-->

        <!--
            Default values for OAuth1RequestTokenUrl, OAuth1AccessTokenUrl, OAuth1AuthorizeUrl
            OAuth2AuthzEPUrl, OAuth2TokenEPUrl and OAuth2UserInfoEPUrl are built in following format
            https://<HostName>:<MgtTrpProxyPort except 443>/<ProxyContextPath>/<context>/<path>
            If above format doesn't satisfy uncomment the following configs and explicitly configure the values
         -->
        <OAuth1RequestTokenUrl>{{oauth.endpoints.oauth1.request_token}}</OAuth1RequestTokenUrl>
        <OAuth1AuthorizeUrl>{{oauth.endpoints.oath1.authorize}}</OAuth1AuthorizeUrl>
        <OAuth1AccessTokenUrl>{{oauth.endpoints.oauth1.access_token}}</OAuth1AccessTokenUrl>
        <OAuth2AuthzEPUrl>{{oauth.endpoints.oauth2.authorize}}</OAuth2AuthzEPUrl>
        <OAuth2TokenEPUrl>{{oauth.endpoints.oauth2.token}}</OAuth2TokenEPUrl>
        <OAuth2RevokeEPUrl>{{oauth.endpoints.oauth2.revoke}}</OAuth2RevokeEPUrl>
        <OAuth2IntrospectEPUrl>{{oauth.endpoints.oauth2.introspect}}</OAuth2IntrospectEPUrl>
        <OAuth2UserInfoEPUrl>{{oauth.endpoints.oauth2.userinfo}}</OAuth2UserInfoEPUrl>
        <OIDCCheckSessionEPUrl>{{oauth.endpoints.oidc.check_session}}</OIDCCheckSessionEPUrl>
        <OIDCLogoutEPUrl>{{oauth.endpoints.oidc.logout}}</OIDCLogoutEPUrl>
        <OAuth2ConsentPage>{{oauth.endpoints.oauth2.consent}}</OAuth2ConsentPage>
        <OAuth2ErrorPage>{{oauth.endpoints.oauth2.error}}</OAuth2ErrorPage>
        <OIDCConsentPage>{{oauth.endpoints.oidc.consent}}</OIDCConsentPage>
        <OIDCLogoutConsentPage>{{oauth.endpoints.oidc.logout_consent}}</OIDCLogoutConsentPage>
        <OIDCLogoutPage>{{oauth.endpoints.oidc.logout_page}}</OIDCLogoutPage>

        <OIDCWebFingerEPUrl>{{oauth.endpoints.oidc.web_finger}}</OIDCWebFingerEPUrl>

        <!-- For tenants below urls will be modified as https://<hostname>:<port>/t/<tenant domain>/<path>-->
        <OAuth2DCREPUrl>{{oauth.endpoints.oauth2.dcr}}</OAuth2DCREPUrl>
        <OAuth2JWKSPage>{{oauth.endpoints.oauth2.jwks}}</OAuth2JWKSPage>
        <OIDCDiscoveryEPUrl>{{oauth.endpoints.oidc.discovery}}</OIDCDiscoveryEPUrl>

        <!-- If enabled, resident Idp entity id will be honoured as the issuer location in OpenId Connect Discovery -->
        <UseEntityIdAsIssuerInOidcDiscovery>{{oauth.use_entityId_as_issuer_in_OIDC_discovery}}</UseEntityIdAsIssuerInOidcDiscovery>

        <!-- If enabled, resident Idp entity id will be honoured as the issuer location in OpenId Connect Discovery -->
        <UseEntityIdAsIssuerInOidcDiscovery>true</UseEntityIdAsIssuerInOidcDiscovery>

        <!-- Default validity period for Authorization Code in seconds -->
        <AuthorizationCodeDefaultValidityPeriod>{{oauth.authz_code.validity_time_s}}</AuthorizationCodeDefaultValidityPeriod>
        <!-- Default validity period for application access tokens in seconds -->
        <AccessTokenDefaultValidityPeriod>{{oauth.app_token.validity_time_s}}</AccessTokenDefaultValidityPeriod>
        <!-- Default validity period for user access tokens in seconds -->
        <UserAccessTokenDefaultValidityPeriod>{{oauth.user_token.validity_time_s}}</UserAccessTokenDefaultValidityPeriod>
        <!-- Validity period for refresh token -->
        <RefreshTokenValidityPeriod>{{oauth.refresh_token.validity_time_s}}</RefreshTokenValidityPeriod>
        <!-- Timestamp skew in seconds -->
        <TimestampSkew>{{oauth.timestamp_skew}}</TimestampSkew>
        <!-- Enable renewal of refresh token for refresh_token grant -->
        <RenewRefreshTokenForRefreshGrant>{{oauth.renew_refresh_token_for_refresh_grant}}</RenewRefreshTokenForRefreshGrant>
        <!-- Process the token before storing it in database, e.g. encrypting -->
        <TokenPersistenceProcessor>{{oauth.token.persistence.processor}}</TokenPersistenceProcessor>
        <!-- This should be true if the oauth keys (consumer secret, access token, refresh token and authorization code) need to be hashed,
             before storing them in the database. If the value is false, the oauth keys will be saved in a plain text format.
             By default : false.
             Supported versions: IS 5.6.0 onwards.
        -->
        <EnableClientSecretHash>{{oauth.hash_client_secret}}</EnableClientSecretHash>
        <!-- If the user is a federated, user will not be able to access claims from local userstore even if the username matches -->
        <MapFederatedUsersToLocal>{{oauth.map_federated_users_to_local}}</MapFederatedUsersToLocal>
        <!-- Supported Response Types -->
        <SupportedResponseTypes>
            {% for response_type in oauth.default_response_types %}
            <SupportedResponseType>
                <ResponseTypeName>{{response_type}}</ResponseTypeName>
                <ResponseTypeHandlerImplClass>{{oauth.default_response_type[response_type].handler_class}}</ResponseTypeHandlerImplClass>
            </SupportedResponseType>
            {% endfor %}
            {% for response_type in oauth.response_type %}
            <SupportedResponseType>
                <ResponseTypeName>{{response_type.name}}</ResponseTypeName>
                <ResponseTypeHandlerImplClass>{{response_type.handler_class}}</ResponseTypeHandlerImplClass>
            </SupportedResponseType>
            {% endfor %}
        </SupportedResponseTypes>
        <!-- Supported Grant Types -->
        <SupportedGrantTypes>
            {% for grant_type in oauth.default_grant_types %}
            <SupportedGrantType>
                <GrantTypeName>{{grant_type}}</GrantTypeName>
                {% for key,value in oauth.default_grant_type[grant_type].items() %}
                <{{key}}>{{value}}</{{key}}>
                {% endfor %}
            </SupportedGrantType>
            {% endfor %}
            {% for grant_type in oauth.grant_type %}
            <SupportedGrantType>
                <GrantTypeName>{{grant_type.name}}</GrantTypeName>
                <GrantTypeHandlerImplClass>{{grant_type.handler_class}}</GrantTypeHandlerImplClass>
                {% for key,value in grant_type.properties.items() %}
                <{{key}}>{{value}}</{{key}}>
                {% endfor %}
            </SupportedGrantType>
            {% endfor %}
        </SupportedGrantTypes>

        <!--
            Defines the grant types that will filter user claims based on user consent in their responses such as
            id_token or user info response.

            Default grant types that filter user claims based on user consent are 'authorization_code' and 'implicit'.

            Supported versions: IS 5.5.0 onwards.
        -->
        <UserConsentEnabledGrantTypes>
        {% for grant_type in oauth.default_consent.enabled_grant_types %}
            <UserConsentEnabledGrantType>
                <GrantTypeName>{{grant_type}}</GrantTypeName>
            </UserConsentEnabledGrantType>
        {% endfor %}
        {% for grant_type in oauth.consent_enabled_grant_types %}
            <UserConsentEnabledGrantType>
                <GrantTypeName>{{grant_type}}</GrantTypeName>
            </UserConsentEnabledGrantType>
        {% endfor %}
        </UserConsentEnabledGrantTypes>

        <OAuthCallbackHandlers>
        {% for callback_handler in oauth.callback_handler %}
            <OAuthCallbackHandler Class="{{callback_handler}}"/>
        {% endfor %}
        </OAuthCallbackHandlers>

        <TokenValidators>
        {% for token_validator in oauth.default_token_validator %}
            <TokenValidator type="{{token_validator.name}}" class="{{token_validator.class}}" />
        {% endfor %}
        {% for token_validator in oauth.token_validator %}
            <TokenValidator type="{{token_validator.type}}" class="{{token_validator.class}}" />
        {% endfor %}
        </TokenValidators>

        <!-- Scope validators list. The validators registered here wil be executed during token validation. -->
        <ScopeValidators>
        {% for scope_validator in oauth.default_scope_validator %}
            <ScopeValidator class="{{scope_validator.class}}" />
        {% endfor %}
        {% for scope_validator in oauth.scope_validators %}
            <ScopeValidator class="{{scope_validator}}" />
        {% endfor %}
        </ScopeValidators>

        <!-- Scope handlers list. The handlers registered here will be executed at the scope validation phase while
             issuing access tokens. -->
        <ScopeHandlers>
        {% for scope_handler in oauth.default_scope_handler %}
            <ScopeHandler class="{{scope_handler}}"/>
        {% endfor %}
        {% for scope_handler in oauth.scope_handlers %}
            <ScopeHandler class="{{scope_handler}}"/>
        {% endfor %}
        </ScopeHandlers>

        <!-- Assertions can be used to embedd parameters into access token. -->
        {% if oauth.assertions.enable_for|length %}
        <EnableAssertions>
        {% for assertion in oauth.assertions.enable_for %}
            <{{assertion}}>{{true}}</{{assertion}}>
        {% endfor %}
        </EnableAssertions>
        {% endif %}


        <!-- This should be true if subject identifier in the token validation response needs to adhere to the
        following SP configuration.

        - Use tenant domain in local subject identifier.
        - Use user store domain in local subject identifier.

        if the value is false, subject identifier will be set as the fully qualified username.

        Default value : false

        Supported versions: IS 5.4.0 beta onwards
        -->
        <!--<BuildSubjectIdentifierFromSPConfig>true</BuildSubjectIdentifierFromSPConfig>-->

        <!-- This should be set to true when using multiple user stores and keys
            should saved into different tables according to the user store. By default
            all the application keys are saved in to the same table. UserName Assertion
            should be 'true' to use this. -->
        <EnableAccessTokenPartitioning>{{oauth.token.partitioning.enable}}</EnableAccessTokenPartitioning>
        <!-- user store domain names and mapping to new table name. eg: if you
            provide 'A:foo.com', foo.com should be the user store domain name and 'A'
            represent the relavant mapping of token store table, i.e. tokens will be
            added to a table called IDN_OAUTH2_ACCESS_TOKEN_A. -->
        <AccessTokenPartitioningDomains>{{oauth.token.partitioning.domains}}</AccessTokenPartitioningDomains>
        <AuthorizationContextTokenGeneration>
            <Enabled>{{oauth.token.validation.context.enable}}</Enabled>
            <TokenGeneratorImplClass>{{oauth.token.validation.context.token_generator}}</TokenGeneratorImplClass>
            <ClaimsRetrieverImplClass>{{oauth.token.validation.context.claim_retriever}}</ClaimsRetrieverImplClass>
            <ConsumerDialectURI>{{oauth.token.validation.context.consumer_dialect}}</ConsumerDialectURI>
            <SignatureAlgorithm>{{oauth.token.validation.context.signature_alg}}</SignatureAlgorithm>
            <AuthorizationContextTTL>{{oauth.token.validation.context.ttl}}</AuthorizationContextTTL>
        </AuthorizationContextTokenGeneration>

        <!-- Configurations for JWT bearer grant. Supported versions: IS 5.8.0 onwards. -->
        <JWTGrant>
            <!-- Validate issued at time (iat) of JWT token. The validity can be set using 'IATValidity' configuration.
            Default value is 'true'.
            -->
            <EnableIATValidation>{{oauth.jwt.iat_validation}}</EnableIATValidation>

            <!-- Reject the JWT if the iat of JWT is pass a certain time period. Time period is in minutes.
            'EnableIATValidation' configuration should be set to 'true' in order to make use of the validity period.
            Default value is '30' minutes.
             -->
            <IATValidityPeriod>{{oauth.jwt.iat_validity_period_mins}}</IATValidityPeriod>
        </JWTGrant>


        <SAML2Grant>
            <!--SAML2TokenHandler></SAML2TokenHandler-->
            <!-- UserType conifg decides whether the SAML assertion carrying user is local user or a federated user.
            Only Local Users can access claims from local userstore. LEGACY users will have to have tenant domain appended username.
            They will not be able to access claims from local userstore. To get claims by mapping users with exact same username from local
            userstore (for non LOCAL scenarios) use mapFederatedUsersToLocal config -->
            <UserType>{{oauth.saml2.grant.user_type}}</UserType>
        </SAML2Grant>

        <OpenIDConnect>
            <IDTokenBuilder>{{oauth.oidc.id_token.builder}}</IDTokenBuilder>
            <SignatureAlgorithm>{{oauth.oidc.id_token.signature_alg}}</SignatureAlgorithm>

            <!-- Default asymmetric encryption algorithm that used to encrypt CEK. -->
            <IDTokenEncryptionAlgorithm>{{oauth.oidc.id_token.supported_encryption_algorithms[0]}}</IDTokenEncryptionAlgorithm>
            <!-- Default symmetric encryption algorithm that used to encrypt JWT claims set. -->
            <IDTokenEncryptionMethod>{{oauth.oidc.id_token.supported_encryption_methods[0]}}</IDTokenEncryptionMethod>

            <!-- Supported versions: IS 5.5.0 onwards. -->
            <SupportedIDTokenEncryptionAlgorithms>
                {% for algorithm in oauth.oidc.id_token.supported_encryption_algorithms %}
                <SupportedIDTokenEncryptionAlgorithm>{{algorithm}}</SupportedIDTokenEncryptionAlgorithm>
                {% endfor %}
            </SupportedIDTokenEncryptionAlgorithms>
            <SupportedIDTokenEncryptionMethods>
                {% for method in oauth.oidc.id_token.supported_encryption_methods %}
                <SupportedIDTokenEncryptionMethod>{{method}}</SupportedIDTokenEncryptionMethod>
                {% endfor %}
            </SupportedIDTokenEncryptionMethods>

            <EnableAudiences>{{oauth.oidc.id_token.enable_audiences}}</EnableAudiences>
            <!-- Comment out to add Audience values to the JWT token (id_token)  -->
            {% if oauth.oidc.id_token.audiences|length %}
            <Audiences>
                {% for audience in oauth.oidc.id_token.audiences %}
                <Audience>{{audience}}</Audience>
                {% endfor %}
            </Audiences>
            {% endif %}

            <!--
                Default value for IDTokenIssuerID, is OAuth2TokenEPUrl.
                If that doesn't satisfy uncomment the following config and explicitly configure the value
            -->
            <IDTokenIssuerID>{{oauth.oidc.id_token.issuer_id}}</IDTokenIssuerID>
            <IDTokenCustomClaimsCallBackHandler>{{oauth.oidc.id_token.claim_callback_hander}}</IDTokenCustomClaimsCallBackHandler>
            <IDTokenExpiration>{{oauth.oidc.id_token.validity_time_s}}</IDTokenExpiration>
            <UserInfoJWTSignatureAlgorithm>{{oauth.oidc.user_info.jwt_signature_alg}}</UserInfoJWTSignatureAlgorithm>
            <UserInfoEndpointClaimRetriever>{{oauth.oidc.user_info.endpoint.claim_retriever}}</UserInfoEndpointClaimRetriever>
            <UserInfoEndpointRequestValidator>{{oauth.oidc.user_info.endpoint.request_validator}}</UserInfoEndpointRequestValidator>
            <UserInfoEndpointAccessTokenValidator>{{oauth.oidc.user_info.endpoint.token_validator}}</UserInfoEndpointAccessTokenValidator>
            <UserInfoEndpointResponseBuilder>{{oauth.oidc.user_info.endpoint.response_builder}}</UserInfoEndpointResponseBuilder>
            <SkipUserConsent>false</SkipUserConsent>
            <!-- Sign the ID Token with Service Provider Tenant Private Key-->
            <SignJWTWithSPKey>false</SignJWTWithSPKey>
            <!--
                Expiry period of the logout token used in OIDC Back Channel Logout in seconds.
                Supported versions: IS 5.5.0 onwards
            -->
            <LogoutTokenExpiration>{{oauth.oidc.logout_token.validity_time_s}}</LogoutTokenExpiration>

            <!--
                OIDC Request Object builder implementation.
                Supported versions: IS 5.4.0 onwards
            -->
            <RequestObjectBuilders>
            {% for builder in oauth.oidc.default_request_object_builder %}
                <RequestObjectBuilder>
                    <Type>{{builder.type}}</Type>
                    <ClassName>{{builder.class}}</ClassName>
                </RequestObjectBuilder>
            {% endfor %}
            {% for builder in oauth.oidc.request_object_builder %}
                <RequestObjectBuilder>
                    <Type>{{builder.type}}</Type>
                    <ClassName>{{builder.class}}</ClassName>
                </RequestObjectBuilder>
             {% endfor %}
            </RequestObjectBuilders>

            <!--
                OIDC Request Object validator implementation.
                Supported versions: IS 5.4.0 onwards
            -->
            <RequestObjectValidator>{{oauth.oidc.request_object.validator}}</RequestObjectValidator>
        </OpenIDConnect>

        <!-- Configs related to OAuth2 token persistence -->
        <TokenPersistence>
            <Enable>{{oauth.token.persistence.enable}}</Enable>
            <PoolSize>{{oauth.token.persistence.pool_size}}</PoolSize>
            <RetryCount>{{oauth.token.persistence.retry_count_on_failure}}</RetryCount>
        </TokenPersistence>

        <!--
            Configuration provides the ability to renew the access token and the refresh token(where applicable) per each token request
            and revoke previously available active token for a matching clientid, user and scopes combination.

            Not applicable for refresh token grant type and when when self-contained access tokens are used.

            Default value : false
            Supported versions : IS 5.8.0 onwards
         -->
        <!--<RenewTokenPerRequest>true</RenewTokenPerRequest>-->
    </OAuth>

    <MultifactorAuthentication>
        <!--Enable>false</Enable-->
        <XMPPSettings>
            <XMPPConfig>
                <XMPPProvider>gtalk</XMPPProvider>
                <XMPPServer>talk.google.com</XMPPServer>
                <XMPPPort>5222</XMPPPort>
                <XMPPExt>gmail.com</XMPPExt>
                <XMPPUserName>multifactor1@gmail.com</XMPPUserName>
                <XMPPPassword>wso2carbon</XMPPPassword>
            </XMPPConfig>
        </XMPPSettings>
    </MultifactorAuthentication>

    <SSOService>
        <EntityId>{{saml.entity_id}}</EntityId>
        <!--
            Default value for IdentityProviderURL is  built in following format
            https://<HostName>:<MgtTrpProxyPort except 443>/<ProxyContextPath>/samlsso
            If that doesn't satisfy uncomment the following config and explicitly configure the value
        -->
        <IdentityProviderURL>{{saml.endpoints.idp_url}}</IdentityProviderURL>
        <DefaultLogoutEndpoint>{{saml.endpoints.logout}}</DefaultLogoutEndpoint>
        <NotificationEndpoint>{{saml.endpoints.notification}}</NotificationEndpoint>
        <ArtifactResolutionEndpoint>{{saml.endpoints.artifact_resolution}}</ArtifactResolutionEndpoint>
        <SingleLogoutRetryCount>{{saml.slo.retry_attempts}}</SingleLogoutRetryCount>
        <SingleLogoutRetryInterval>{{saml.slo.retry_interval_ms}}</SingleLogoutRetryInterval>
        <!-- in milli seconds -->
        <TenantPartitioningEnabled>{{saml.tenant_partitioning.enable}}</TenantPartitioningEnabled>
        <AttributesClaimDialect>{{saml.attribute_claim_dialect}}</AttributesClaimDialect>
        <!--<SAMLSSOAssertionBuilder>org.wso2.carbon.identity.sso.saml.builders.assertion.ExtendedDefaultAssertionBuilder</SAMLSSOAssertionBuilder>-->
        <SAMLSSOAssertionBuilder>{{saml.extensions.assertion_builder}}</SAMLSSOAssertionBuilder>
        <SAMLSSOEncrypter>{{saml.extensions.encrypter}}</SAMLSSOEncrypter>
        <SAMLSSOSigner>{{saml.extensions.signer}}</SAMLSSOSigner>
        <SAML2HTTPRedirectSignatureValidator>{{saml.extensions.redirect_signature_validator}}</SAML2HTTPRedirectSignatureValidator>
        <!--SAMLSSOResponseBuilder>{{saml.extensions.response_builder}}</SAMLSSOResponseBuilder-->

        <!-- SAML Token validity period in minutes -->
        <SAMLResponseValidityPeriod>{{saml.response.validity_mins}}</SAMLResponseValidityPeriod>
        <UseAuthenticatedUserDomainCrypto>false</UseAuthenticatedUserDomainCrypto>
        <SAMLDefaultSigningAlgorithmURI>{{saml.signing_alg}}</SAMLDefaultSigningAlgorithmURI>
        <SAMLDefaultDigestAlgorithmURI>{{saml.digest_alg}}</SAMLDefaultDigestAlgorithmURI>
        <SAMLDefaultAssertionEncryptionAlgorithmURI>{{saml.assertion_entryption_alg}}</SAMLDefaultAssertionEncryptionAlgorithmURI>
        <SAMLDefaultKeyEncryptionAlgorithmURI>{{saml.key_encryption_alg}}</SAMLDefaultKeyEncryptionAlgorithmURI>
        <SLOHostNameVerificationEnabled>{{saml.slo.host_name_verification}}</SLOHostNameVerificationEnabled>

        <SAML2ArtifactValidityPeriodInMinutes>{{saml.artifact.validity_mins}}</SAML2ArtifactValidityPeriodInMinutes>
        <SAMLECPEndpoint>{{saml.endpoints.ecp}}</SAMLECPEndpoint>
    </SSOService>

    <Consent>
        <!--Specify whether consent management should be enable during SSO.-->
        <EnableSSOConsentManagement>false</EnableSSOConsentManagement>
    </Consent>

    <SecurityTokenService>
        <!--
            Default value for IdentityProviderURL is  built in following format
            https://<HostName>:<MgtTrpProxyPort except 443>/<ProxyContextPath>/services/wso2carbon-sts
            If that doesn't satisfy uncomment the following config and explicitly configure the value
        -->
        <IdentityProviderURL>{{sts.endpoint.idp}}</IdentityProviderURL>
    </SecurityTokenService>

    <PassiveSTS>
        <!--
            Default value for IdentityProviderURL is  built in following format
            https://<HostName>:<MgtTrpProxyPort except 443>/<ProxyContextPath>/passivests
            If that doesn't satisfy uncomment the following config and explicitly configure the value
        -->
        <IdentityProviderURL>{{passive_sts.endpoints.idp}}</IdentityProviderURL>
        <RetryURL>{{passive_sts.endpoints.retry}}</RetryURL>
        <TokenStoreClassName>{{passive_sts.token_store_class}}</TokenStoreClassName>
        <SLOHostNameVerificationEnabled>{{passive_sts.slo.host_name_verification}}</SLOHostNameVerificationEnabled>
    </PassiveSTS>

    <EntitlementSettings>
        <ThirftBasedEntitlementConfig>
            <EnableThriftService>{{entitlement.thrift.enable}}</EnableThriftService>
            <ReceivePort>{{entitlement.thrift.receiver_port}}</ReceivePort>
            <ClientTimeout>{{entitlement.thrift.client_timeout}}</ClientTimeout>
            <KeyStore>
                <Location>${carbon.home}/repository/resources/security/{{entitlement.thrift.key_store.id}}</Location>
                <Password>{{entitlement.thrift.key_store.password}}</Password>
            </KeyStore>
            <!-- Enable this element to mention the host-name of your IS machine -->
            <ThriftHostName>{{entitlement.thrift.hostname}}</ThriftHostName>
        </ThirftBasedEntitlementConfig>
    </EntitlementSettings>

    <SCIM>
        <!--
            Default value for UserEPUrl and GroupEPUrl are built in following format
            https://<HostName>:<MgtTrpProxyPort except 443>/<ProxyContextPath>/<context>/<path>
            If that doesn't satisfy uncomment the following config and explicitly configure the value
        -->
        <UserEPUrl>{{scim.user.endpoint}}</UserEPUrl>
        <GroupEPUrl>{{scim.group.endpoint}}</GroupEPUrl>
        <ShowAllUserDetails>{{scim.user.show_all_details}}</ShowAllUserDetails>
        <SCIMAuthenticators>
            <Authenticator class="{{scim.default_authenticator.basic_auth_handler.class}}">
                <Property name="Priority">{{scim.default_authenticator.basic_auth_handler.priority}}</Property>
                {% for key,value in scim.default_authenticator.basic_auth_handler.properties.items() %}
                <Property name="{{key}}">{{value}}</Property>
                {% endfor %}
            </Authenticator>
            <Authenticator class="{{scim.default_authenticator.oauth_handler.class}}">
                <Property name="Priority">{{scim.default_authenticator.oauth_handler.priority}}</Property>
                {% for key,value in scim.default_authenticator.oauth_handler.properties.items() %}
                <Property name="{{key}}">{{value}}</Property>
                {% endfor %}
            </Authenticator>
            {% for authenticator in scim.authenticator %}
            <Authenticator class="{{authenticator.class}}">
                <Property name="Priority">{{authenticator.prority}}</Property>
                {% for key,value in authenticator.properties.items() %}
                <Property name="{{key}}">{{value}}</Property>
                {% endfor %}
            </Authenticator>
            {% endfor %}

            <!-- Flag to indicate advanced complex multiValued attributes support enabled or not.
            Default value : false
            Supported versions: IS 5.5.0 beta onwards
            -->
            <ComplexMultiValuedAttributeSupportEnabled>{{scim.support_complex_multivalued}}</ComplexMultiValuedAttributeSupportEnabled>
        </SCIMAuthenticators>
    </SCIM>

    <SCIM2>
        <!--
            Default value for UserEPUrl and GroupEPUrl are built in following format
            https://<HostName>:<MgtTrpProxyPort except 443>/<ProxyContextPath>/<context>/<path>
            If that doesn't satisfy uncomment the following config and explicitly configure the value
        -->
        <UserEPUrl>{{scim2.user.endpoint}}</UserEPUrl>
        <GroupEPUrl>{{scim2.group.endpoint}}</GroupEPUrl>
        <ComplexMultiValuedAttributeSupportEnabled>{{scim2.support_complex_multivalued}}</ComplexMultiValuedAttributeSupportEnabled>
        <EnableFilteringEnhancements>{{scim2.filtering_enhancements_enable}}</EnableFilteringEnhancements>
    </SCIM2>

    <Recovery>
        <ReCaptcha>
            <Password>
                <Enable>{{mgt.recovery.password_recovery.recaptcha.enable}}</Enable>
            </Password>
            <Username>
                <Enable>{{mgt.recovery.username_recovery.recaptcha.enable}}</Enable>
            </Username>
        </ReCaptcha>
        <Notification>
            <Password>
                <Enable>{{mgt.recovery.password_recovery.with_notification.enable}}</Enable>
            </Password>
            <Username>
                <Enable>{{mgt.recovery.username_recovery.with_notification.enable}}</Enable>
            </Username>
            <InternallyManage>{{mgt.recovery.notification.manage_internally}}</InternallyManage>
       </Notification>
       <Question>
            <Password>
                <Enable>{{mgt.recovery.password_recovery.with_challenge_question.enable}}</Enable>
                <NotifyStart>{{mgt.recovery.password_recovery.with_challenge_question.notify_start}}</NotifyStart>
                <Separator>{{mgt.recovery.password_recovery.with_challenge_question.separator_char}}</Separator>
                <MinAnswers>{{mgt.recovery.password_recovery.with_challenge_question.min_answers}}</MinAnswers>
                <ReCaptcha>
                    <Enable>{{mgt.recovery.password_recovery.with_challenge_question.recaptcha.enable}}</Enable>
                    <MaxFailedAttempts>{{mgt.recovery.password_recovery.with_challenge_question.recaptcha.max_fails}}</MaxFailedAttempts>
                </ReCaptcha>
            </Password>
        </Question>
        <ExpiryTime>{{mgt.recovery.notification.expiry_time_s}}</ExpiryTime>
        <NotifySuccess>{{mgt.recovery.notification.notify_success}}</NotifySuccess>
        <AdminPasswordReset>
            <Offline>{{mgt.recovery.password_recovery.by_admin.offline}}</Offline>
            <OTP>{{mgt.recovery.password_recovery.by_admin.otp}}</OTP>
            <RecoveryLink>{{mgt.recovery.password_recovery.by_admin.recovery_link}}</RecoveryLink>
        </AdminPasswordReset>
    </Recovery>

    <EmailVerification>
        <Enable>{{mgt.email_verification.enable}}</Enable>
	    <ExpiryTime>{{mgt.email_verification.notification.expiry_time_minutes}}</ExpiryTime>
        <LockOnCreation>{{mgt.email_verification.account.lock_on_creation}}</LockOnCreation>
        <Notification>
            <InternallyManage>{{mgt.email_verification.notification.manage_internally}}</InternallyManage>
        </Notification>
        <AskPassword>
	        <ExpiryTime>{{mgt.email_verification.ask_password.expiry_time_minutes}}</ExpiryTime>
	        <PasswordGenerator>{{mgt.email_verification.ask_password.password_generator}}</PasswordGenerator>
        </AskPassword>
    </EmailVerification>

    <SelfRegistration>
        <Enable>{{mgt.self_registration.enable}}</Enable>
        <LockOnCreation>{{mgt.self_registration.account.lock_on_creation}}</LockOnCreation>
        <Notification>
            <InternallyManage>{{mgt.self_registration.notification.manage_internally}}</InternallyManage>
        </Notification>
        <ReCaptcha>{{mgt.self_registration.recaptcha.enable}}</ReCaptcha>
	    <VerificationCode>
	        <ExpiryTime>{{mgt.self_registration.notification.expiry_time_minutes}}</ExpiryTime>
	    </VerificationCode>
        <CallbackRegex>{{mgt.self_registration.callback_regex}}</CallbackRegex>
    </SelfRegistration>

    <!--
         This configuration is used to filter the SP configured role mappings. If the property value is,

         true : If SP role mappings are configured, returns only the mapped SP roles. If SP role mappings are not
         configured returns all the mapped local roles.

         false : If SP role mappings are configured, returns mapped SP roles for the mapped roles and the local mapped
         roles for others. If SP role mappings are not configured returns all the mapped local roles.

         Default - false.
     -->

    <!--SPRoleManagement>
        <ReturnOnlyMappedLocalRoles>false</ReturnOnlyMappedLocalRoles>
    </SPRoleManagement-->

    <EnableAskPasswordAdminUI>{{mgt.email_verification.ask_password.admin_console_ui.enable}}</EnableAskPasswordAdminUI>

    <EnableRecoveryEndpoint>{{mgt.recovery.endpoint.enable}}</EnableRecoveryEndpoint>
    <EnableSelfSignUpEndpoint>{{mgt.self_registration.endpoint.enable}}</EnableSelfSignUpEndpoint>

    <AuthenticationPolicy>
        <CheckAccountExist>{{mgt.email_verification.check_account_existence}}</CheckAccountExist>
    </AuthenticationPolicy>

    <JITProvisioning>
        <UserNameProvisioningUI>/accountrecoveryendpoint/register.do</UserNameProvisioningUI>
        <PasswordProvisioningUI>/accountrecoveryendpoint/signup.do</PasswordProvisioningUI>
    </JITProvisioning>

    <EventListeners>
        <EventListener type="org.wso2.carbon.user.core.listener.UserOperationEventListener"
                       name="org.wso2.carbon.user.mgt.workflow.userstore.UserStoreActionListener"
                       orderId="10" enable="true"/>
        <EventListener type="org.wso2.carbon.user.core.listener.UserOperationEventListener"
                       name="org.wso2.carbon.identity.mgt.IdentityMgtEventListener"
                       orderId="50" enable="false"/>
        <!-- Enable the following SCIM 1.1 event listener and disable the SCIM2 event listener if SCIM 1.1 is
        used. -->
        <EventListener type="org.wso2.carbon.user.core.listener.UserOperationEventListener"
                       name="org.wso2.carbon.identity.scim.common.listener.SCIMUserOperationListener"
                       orderId="90" enable="false"/>
        <EventListener type="org.wso2.carbon.user.core.listener.UserOperationEventListener"
                       name="org.wso2.carbon.identity.scim2.common.listener.SCIMUserOperationListener"
                       orderId="93" enable="true"/>
        <EventListener type="org.wso2.carbon.user.core.listener.UserOperationEventListener"
                       name="org.wso2.carbon.identity.governance.listener.IdentityMgtEventListener"
                       orderId="95" enable="true"/>
        <EventListener type="org.wso2.carbon.user.core.listener.UserOperationEventListener" name="org.wso2.carbon.identity.governance.listener.IdentityStoreEventListener"
                       orderId="97" enable="true">
            <Property name="Data.Store">org.wso2.carbon.identity.governance.store.JDBCIdentityDataStore</Property>
        </EventListener>
        <EventListener type="org.wso2.carbon.identity.core.handler.AbstractIdentityMessageHandler"
                       name="org.wso2.carbon.identity.data.publisher.application.authentication.AuthnDataPublisherProxy"
                       orderId="11" enable="true"/>
        <EventListener type="org.wso2.carbon.identity.core.handler.AbstractIdentityHandler"
                       name="org.wso2.carbon.identity.data.publisher.oauth.listener.OAuthTokenIssuanceLogPublisher"
                       orderId="12" enable="false">
            <Property name="Log.Token">false</Property>
        </EventListener>

        <!-- Enable this listener to call DeleteEventRecorders. -->
        <EventListener type="org.wso2.carbon.user.core.listener.UserOperationEventListener"
                       name="org.wso2.carbon.user.mgt.listeners.UserDeletionEventListener"
                       orderId="98" enable="false"/>
        <EventListener type="org.wso2.carbon.identity.core.handler.AbstractIdentityHandler"
                       name="org.wso2.carbon.identity.application.authentication.framework.handler.request.impl.consent.ConsentMgtPostAuthnHandler"
                       orderId="110" enable="true"/>

        <!-- Post Authentication handlers for JIT provisioning, association and for handling subject identifier -->
        <EventListener type="org.wso2.carbon.identity.core.handler.AbstractIdentityHandler"
                       name="org.wso2.carbon.identity.application.authentication.framework.handler.request.impl.JITProvisioningPostAuthenticationHandler"
                       orderId="20" enable="true"/>
        <EventListener type="org.wso2.carbon.identity.core.handler.AbstractIdentityHandler"
                       name="org.wso2.carbon.identity.application.authentication.framework.handler.request.impl.PostAuthAssociationHandler"
                       orderId="25" enable="true"/>
        <EventListener type="org.wso2.carbon.identity.core.handler.AbstractIdentityHandler"
                       name="org.wso2.carbon.identity.application.authentication.framework.handler.request.impl.PostAuthenticatedSubjectIdentifierHandler"
                       orderId="30" enable="true"/>

        <!-- Audit Loggers -->

        <!-- Old Audit Logger -->
        <EventListener type="org.wso2.carbon.user.core.listener.UserOperationEventListener"
                       name="org.wso2.carbon.user.mgt.listeners.UserMgtAuditLogger"
                       orderId="0" enable="false"/>

        <!-- New Audit Loggers-->
        <EventListener type="org.wso2.carbon.user.core.listener.UserOperationEventListener"
                       name="org.wso2.carbon.user.mgt.listeners.UserManagementAuditLogger"
                       orderId="1" enable="true"/>
        <EventListener type="org.wso2.carbon.user.core.listener.UserManagementErrorEventListener"
                       name="org.wso2.carbon.user.mgt.listeners.UserMgtFailureAuditLogger"
                       orderId="0" enable="true"/>
    </EventListeners>

    <!-- These recorders are used to write user delete information to specific sources. Default event recorder is CSV
     file recorder. This recorder is disabled by default. Enable it by setting enable="true". To run these recorders,
     EventListener "rg.wso2.carbon.user.mgt.listeners.UserDeletionEventListener" also should be enabled. Which is
     also disabled by default. -->
    <UserDeleteEventRecorders>
        <UserDeleteEventRecorder name="org.wso2.carbon.user.mgt.recorder.DefaultUserDeletionEventRecorder" enable="false">
            <!-- Un comment below line if you need to write entries to a separate .csv file. Otherwise this will be
            written in to a log file using a separate appender. -->
            <!--<Property name="path">${carbon.home}/repository/logs/delete-records.csv</Property>-->
        </UserDeleteEventRecorder>
    </UserDeleteEventRecorders>

    <CacheConfig>
        <!-- Identity cache configuration.
             Timeouts are in seconds.
             Capacity is the maximum cache size.
             Unless specifically mentioned, you do not need to set the isDistributed flag.
         -->
        <CacheManager name="IdentityApplicationManagementCacheManager">
            <Cache name="AppAuthFrameworkSessionContextCache"
                                                     enable="true" timeout="300" capacity="5000" isDistributed="false"/>
            <Cache name="AuthenticationContextCache" enable="true" timeout="300" capacity="5000" isDistributed="false"/>
            <Cache name="AuthenticationRequestCache" enable="true" timeout="300" capacity="5000" isDistributed="false"/>
            <Cache name="AuthenticationResultCache"  enable="true" timeout="300" capacity="5000" isDistributed="false"/>
            <Cache name="AppInfoCache"               enable="true"  timeout="900" capacity="5000" isDistributed="false"/>
            <Cache name="AuthorizationGrantCache"    enable="true" timeout="300" capacity="5000" isDistributed="false"/>
            <Cache name="JWKSCache"                  enable="true" timeout="300" capacity="5000" isDistributed="false"/>
            <Cache name="OAuthCache"                 enable="true" timeout="300" capacity="5000" isDistributed="false"/>
            <Cache name="OAuthScopeCache"            enable="true"  timeout="300" capacity="5000" isDistributed="false"/>
            <Cache name="OAuthSessionDataCache"      enable="true" timeout="300" capacity="5000" isDistributed="false"/>
            <Cache name="SAMLSSOParticipantCache"    enable="true" timeout="300" capacity="5000" isDistributed="false"/>
            <Cache name="SAMLSSOSessionIndexCache"   enable="true" timeout="300" capacity="5000" isDistributed="false"/>
            <Cache name="SAMLSSOSessionDataCache"    enable="true" timeout="300" capacity="5000" isDistributed="false"/>
            <Cache name="ServiceProviderCache"       enable="true"  timeout="900" capacity="5000" isDistributed="false"/>
            <Cache name="ProvisioningConnectorCache" enable="true"  timeout="900" capacity="5000" isDistributed="false"/>
            <Cache name="ProvisioningEntityCache"    enable="true" timeout="900" capacity="5000" isDistributed="false"/>
            <Cache name="ServiceProviderProvisioningConnectorCache" enable="true"  timeout="900" capacity="5000" isDistributed="false"/>
            <Cache name="IdPCacheByAuthProperty"     enable="true"  timeout="900" capacity="5000" isDistributed="false"/>
            <Cache name="IdPCacheByHRI"              enable="true"  timeout="900" capacity="5000" isDistributed="false"/>
            <Cache name="IdPCacheByName"             enable="true"  timeout="900" capacity="5000" isDistributed="false"/>
        </CacheManager>
    </CacheConfig>

    <!--Cookies>
        <Cookie name="commonAuthId" domain="localhost" httpOnly="true" secure="true" />
    </Cookies-->


    <ResourceAccessControl>
        <Resource context="(.*)/api/identity/user/v1.0/validate-code(.*)" secured="true" http-method="all">
            <Permissions>/permission/admin/manage/identity/identitymgt</Permissions>
        </Resource>
        <Resource context="(.*)/api/identity/user/v1.0/resend-code(.*)" secured="true" http-method="all"/>
        <Resource context="(.*)/api/identity/user/v1.0/me(.*)" secured="true" http-method="POST"/>
        <Resource context="(.*)/api/identity/user/v1.0/me(.*)" secured="true" http-method="GET"/>
        <Resource context="(.*)/api/identity/user/v1.0/pi-info" secured="true" http-method="all">
            <Permissions>/permission/admin/manage/identity/usermgt/view</Permissions>
        </Resource>
        <Resource context="(.*)/api/identity/user/v1.0/pi-info/(.*)" secured="true" http-method="all">
            <Permissions>/permission/admin/manage/identity/usermgt/view</Permissions>
        </Resource>

        <Resource context="(.*)/api/identity/consent-mgt/v1.0/consents" secured="true" http-method="all"/>
        <Resource context="(.*)/api/identity/consent-mgt/v1.0/consents/receipts/(.*)" secured="true" http-method="all"/>

        <Resource context="(.*)/api/identity/consent-mgt/v1.0/consents/purposes(.*)" secured="true" http-method="POST">
            <Permissions>/permission/admin/manage/identity/consentmgt/add</Permissions>
        </Resource>
        <Resource context="(.*)/api/identity/consent-mgt/v1.0/consents/purposes(.*)" secured="true" http-method="GET"/>
        <Resource context="(.*)/api/identity/consent-mgt/v1.0/consents/purposes(.+)" secured="true" http-method="DELETE">
            <Permissions>/permission/admin/manage/identity/consentmgt/delete</Permissions>
        </Resource>

        <Resource context="(.*)/api/identity/consent-mgt/v1.0/consents/pii-categories(.*)" secured="true" http-method="POST">
            <Permissions>/permission/admin/manage/identity/consentmgt/add</Permissions>
        </Resource>
        <Resource context="(.*)/api/identity/consent-mgt/v1.0/consents/pii-categories(.*)" secured="true" http-method="GET"/>
        <Resource context="(.*)/api/identity/consent-mgt/v1.0/consents/pii-categories(.+)" secured="true" http-method="DELETE">
            <Permissions>/permission/admin/manage/identity/consentmgt/delete</Permissions>
        </Resource>

        <Resource context="(.*)/api/identity/consent-mgt/v1.0/consents/purpose-categories(.*)" secured="true" http-method="POST">
            <Permissions>/permission/admin/manage/identity/consentmgt/add</Permissions>
        </Resource>
        <Resource context="(.*)/api/identity/consent-mgt/v1.0/consents/purpose-categories(.*)" secured="true" http-method="GET"/>
        <Resource context="(.*)/api/identity/consent-mgt/v1.0/consents/purpose-categories(.+)" secured="true" http-method="DELETE">
            <Permissions>/permission/admin/manage/identity/consentmgt/delete</Permissions>
        </Resource>

        <Resource context="(.*)/api/identity/recovery/(.*)" secured="true" http-method="all">
            <Permissions>/permission/admin/manage/identity/identitymgt</Permissions>
        </Resource>
        <Resource context="(.*)/.well-known(.*)" secured="true" http-method="all"/>
        <Resource context="(.*)/api/identity/oauth2/dcr/v1.1/register(.*)" secured="true" http-method="POST">
            <Permissions>/permission/admin/manage/identity/applicationmgt/create</Permissions>
        </Resource>
        <Resource context="(.*)/api/identity/oauth2/dcr/v1.1/register(.*)" secured="true" http-method="DELETE">
            <Permissions>/permission/admin/manage/identity/applicationmgt/delete</Permissions>
        </Resource>
        <Resource context="(.*)/api/identity/oauth2/dcr/v1.1/register(.*)" secured="true" http-method="PUT">
            <Permissions>/permission/admin/manage/identity/applicationmgt/update</Permissions>
        </Resource>
        <Resource context="(.*)/api/identity/oauth2/dcr/v1.1/register(.*)" secured="true" http-method="GET">
            <Permissions>/permission/admin/manage/identity/applicationmgt/view</Permissions>
        </Resource>
        <Resource context="(.*)/identity/register(.*)" secured="true" http-method="all">
            <Permissions>/permission/admin/manage/identity/applicationmgt/delete</Permissions>
        </Resource>
        <Resource context="(.*)/identity/connect/register(.*)" secured="true" http-method="all">
            <Permissions>/permission/admin/manage/identity/applicationmgt/create</Permissions>
        </Resource>
        <Resource context="(.*)/oauth2/introspect(.*)" secured="true" http-method="all">
            <Permissions>/permission/admin/manage/identity/applicationmgt/view</Permissions>
        </Resource>
        <Resource context="(.*)/api/identity/entitlement/(.*)" secured="true" http-method="all">
            <Permissions>/permission/admin/manage/identity/pep</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Users(.*)" secured="true" http-method="POST">
            <Permissions>/permission/admin/manage/identity/usermgt/create</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Users" secured="true" http-method="GET">
            <Permissions>/permission/admin/manage/identity/usermgt/list</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Groups(.*)" secured="true" http-method="POST">
            <Permissions>/permission/admin/manage/identity/rolemgt/create</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Groups" secured="true" http-method="GET">
            <Permissions>/permission/admin/manage/identity/rolemgt/view</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Users/(.*)" secured="true" http-method="GET">
            <Permissions>/permission/admin/manage/identity/usermgt/view</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Users/(.*)" secured="true" http-method="PUT">
            <Permissions>/permission/admin/manage/identity/usermgt/update</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Users/(.*)" secured="true" http-method="PATCH">
            <Permissions>/permission/admin/manage/identity/usermgt/update</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Users/(.*)" secured="true" http-method="DELETE">
            <Permissions>/permission/admin/manage/identity/usermgt/delete</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Groups/(.*)" secured="true" http-method="GET">
            <Permissions>/permission/admin/manage/identity/rolemgt/view</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Groups/(.*)" secured="true" http-method="PUT">
            <Permissions>/permission/admin/manage/identity/rolemgt/update</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Groups/(.*)" secured="true" http-method="PATCH">
            <Permissions>/permission/admin/manage/identity/rolemgt/update</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Groups/(.*)" secured="true" http-method="DELETE">
            <Permissions>/permission/admin/manage/identity/rolemgt/delete</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Me" secured="true"    http-method="GET">
            <Permissions>/permission/admin/login</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Me" secured="true" http-method="DELETE">
            <Permissions>/permission/admin/manage/identity/usermgt/delete</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Me" secured="true"    http-method="PUT">
            <Permissions>/permission/admin/login</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Me" secured="true"   http-method="PATCH">
            <Permissions>/permission/admin/login</Permissions>
        </Resource>
        <Resource context="(.*)/scim2/Me" secured="true" http-method="POST">
            <Permissions>/permission/admin/manage/identity/usermgt/create</Permissions>
        </Resource>
        <Resource context="/scim2/ServiceProviderConfig" secured="false" http-method="all">
            <Permissions></Permissions>
        </Resource>
        <Resource context="/scim2/ResourceTypes" secured="false" http-method="all">
            <Permissions></Permissions>
        </Resource>
        <Resource context="/scim2/Bulk(.*)" secured="true"  http-method="all">
            <Permissions>/permission/admin/manage/identity/usermgt</Permissions>
        </Resource>
        <Resource context="(.*)/api/identity/oauth2/dcr/(.*)" secured="true" http-method="all">
            <Permissions>/permission/admin/manage/identity/applicationmgt</Permissions>
        </Resource>

        <Resource context="(.*)/api/identity/oauth2/uma/resourceregistration/v1.0/(.*)" secured="true" http-method="all"/>
        <Resource context="(.*)/api/identity/oauth2/uma/permission/v1.0/(.*)" secured="true" http-method="all"/>
        <Resource context="(.*)/api/identity/auth/(.*)" secured="true" http-method="all"/>
        <Resource context="(.*)/api/identity/template/mgt/v1.0.0/(.*)" secured="true" http-method="all"/>
    </ResourceAccessControl>

    <ClientAppAuthentication>
        <Application name="dashboard" hash="66cd9688a2ae068244ea01e70f0e230f5623b7fa4cdecb65070a09ec06452262"/>
    </ClientAppAuthentication>

    <!--
    This property restricts federated user association done through UserProfileAdmin admin service.
    Would not affect associations done through provisioning
    -->
    <EnableFederatedUserAssociation>false</EnableFederatedUserAssociation>

    <TenantContextsToRewrite>
        <WebApp>
            <Context>/api/identity/user/v1.0/</Context>
            <Context>/api/identity/consent-mgt/v1.0/</Context>
            <Context>/api/identity/recovery/v0.9/</Context>
            <Context>/oauth2/</Context>
            <Context>/scim2/</Context>
            <Context>/api/identity/entitlement/</Context>
            <Context>/api/identity/oauth2/dcr/v1.1/</Context>
            <Context>/api/identity/template/mgt/v1.0.0/</Context>
        </WebApp>
        <Servlet>
            <Context>/identity/(.*)</Context>
        </Servlet>
    </TenantContextsToRewrite>

    <!-- Server Synchronization Tolerance Configuration in seconds -->
    <ClockSkew>300</ClockSkew>

    <!-- JWT validator configurations -->
    <JWTValidatorConfigs>
        <Enable>true</Enable>
        <JWKSEndpoint>
            <HTTPConnectionTimeout>1000</HTTPConnectionTimeout>
            <HTTPReadTimeout>1000</HTTPReadTimeout>
            <HTTPSizeLimit>51200</HTTPSizeLimit>
        </JWKSEndpoint>
    </JWTValidatorConfigs>

    <AdaptiveAuth>
        <!--Default configs for event publisher-->
        <EventPublisher>
            <ReceiverURL>https://localhost:8280/</ReceiverURL>
            <BasicAuthentication>
                <Enable>true</Enable>
                <Username>admin</Username>
                <Password>admin</Password>
            </BasicAuthentication>
        </EventPublisher>
        <!--End of default configs for event publisher-->

        <AsyncSequenceExecutorPoolSize>5</AsyncSequenceExecutorPoolSize>
        <MaxTotalConnections>20</MaxTotalConnections>
        <MaxTotalConnectionsPerRoute>20</MaxTotalConnectionsPerRoute>

        <!--Timeouts in milliseconds-->
        <!--Default configs for timeouts-->
        <!--<HTTPConnectionTimeout>5000</HTTPConnectionTimeout>-->
        <!--<HTTPReadTimeout>5000</HTTPReadTimeout>-->
        <!--<HTTPConnectionRequestTimeout>5000</HTTPConnectionRequestTimeout>-->
        <!--End of default configs for timeouts-->

        <!--<RefreshInterval>500</RefreshInterval>-->
        <!--End of timeouts in milliseconds-->

        <!--<PromptOnLongWait>false</PromptOnLongWait>-->

        <!--Timeout in milliseconds for the waiting external calls-->
        <LongWaitTimeout>10000</LongWaitTimeout>
    </AdaptiveAuth>

    <!--Intermediate certificate validation for certificate based requests-->
    <IntermediateCertValidation enable="false">
        <IntermediateCerts>
            <!--Add intermediate certificate CN. Multiple <CertCN> elements can be used for multiple certificates.-->
            <CertCN>localhost</CertCN>
        </IntermediateCerts>
        <ExemptContext>
            <!--Add exemptable context paths. Multiple <Context> elements can be used for multiple contexts.-->
            <Context>scim2</Context>
        </ExemptContext>
    </IntermediateCertValidation>

</Server>
