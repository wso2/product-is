CREATE TABLE UM_USER
(
  ID             INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  USER_UNIQUE_ID VARCHAR(64)                        NOT NULL,
);
CREATE UNIQUE INDEX unique_ID_INDEX_1
  ON UM_USER (USER_UNIQUE_ID);

CREATE TABLE UM_GROUP
(
  ID              INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  GROUP_UNIQUE_ID VARCHAR(64)                        NOT NULL,
);

CREATE TABLE UM_ATTRIBUTES
(
  ID        INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  ATTR_NAME VARCHAR(255)                       NOT NULL,
);

CREATE TABLE UM_USER_ATTRIBUTES
(
  ID         INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  ATTR_ID    INTEGER                            NOT NULL,
  ATTR_VALUE VARCHAR(1024)                      NOT NULL,
  USER_ID    INTEGER                            NOT NULL,
  FOREIGN KEY (USER_ID) REFERENCES UM_USER (ID) ON DELETE CASCADE,
  FOREIGN KEY (ATTR_ID) REFERENCES UM_ATTRIBUTES (ID) ON DELETE CASCADE
);

CREATE TABLE UM_GROUP_ATTRIBUTES
(
  ID         INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  ATTR_ID    INTEGER                            NOT NULL,
  ATTR_VALUE VARCHAR(1024)                      NOT NULL,
  GROUP_ID   INTEGER                            NOT NULL,
  FOREIGN KEY (GROUP_ID) REFERENCES UM_GROUP (ID) ON DELETE CASCADE,
  FOREIGN KEY (ATTR_ID) REFERENCES UM_ATTRIBUTES (ID) ON DELETE CASCADE
);

CREATE TABLE UM_USER_GROUP
(
  ID       INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  USER_ID  INTEGER                            NOT NULL,
  GROUP_ID INTEGER                            NOT NULL,
  FOREIGN KEY (GROUP_ID) REFERENCES UM_GROUP (ID) ON DELETE CASCADE,
  FOREIGN KEY (USER_ID) REFERENCES UM_USER (ID) ON DELETE CASCADE
);

--CREDENTIAL STORE
CREATE TABLE UM_PASSWORD
(
  ID             INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  PASSWORD       VARCHAR(88)                        NOT NULL,
  USER_UNIQUE_ID VARCHAR(64)                        NOT NULL,
);

CREATE TABLE UM_PASSWORD_INFO
(
  ID              INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  PASSWORD_SALT   VARCHAR(64)                        NOT NULL,
  HASH_ALGO       VARCHAR(128)                       NOT NULL,
  ITERATION_COUNT INT,
  KEY_LENGTH      INT,
  USER_ID         VARCHAR(64)                        NOT NULL,
  FOREIGN KEY (USER_ID) REFERENCES UM_PASSWORD (ID) ON DELETE CASCADE
);

/* NOTE: Use VARCHAR(255) instead of VARCHAR(256) if the length needed is less than 256. Because 256 will require
 * two bytes to store the VARCHAR character length.
 */

--AUTHORIZATION STORE
CREATE TABLE UM_ROLE
(
  ID             INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  ROLE_UNIQUE_ID VARCHAR(64)                        NOT NULL,
  ROLE_NAME      VARCHAR(255) UNIQUE                NOT NULL
);

CREATE TABLE UM_RESOURCE_NAMESPACE
(
  ID          INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL,
  NAMESPACE   VARCHAR(10)                        NOT NULL,
  DESCRIPTION VARCHAR(255)
);

CREATE TABLE UM_RESOURCE
(
  ID             INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL,
  NAMESPACE_ID   INTEGER                            NOT NULL,
  RESOURCE_NAME  VARCHAR(255)                       NOT NULL,
  USER_UNIQUE_ID VARCHAR(64)                        NOT NULL,
  FOREIGN KEY (NAMESPACE_ID) REFERENCES UM_RESOURCE_NAMESPACE (ID),
  CONSTRAINT RESOURCE_CPK UNIQUE (NAMESPACE_ID, RESOURCE_NAME)
);

CREATE TABLE UM_ACTION
(
  ID           INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL,
  NAMESPACE_ID INTEGER                            NOT NULL,
  ACTION_NAME  VARCHAR(255)                       NOT NULL,
  FOREIGN KEY (NAMESPACE_ID) REFERENCES UM_RESOURCE_NAMESPACE (ID),
  CONSTRAINT ACTION_UC UNIQUE (NAMESPACE_ID, ACTION_NAME)
);

CREATE TABLE UM_PERMISSION
(
  ID                   INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL,
  RESOURCE_ID          INTEGER                            NOT NULL,
  ACTION_ID            INTEGER                            NOT NULL,
  PERMISSION_UNIQUE_ID VARCHAR(64)                        NOT NULL,
  FOREIGN KEY (RESOURCE_ID) REFERENCES UM_RESOURCE (ID) ON DELETE CASCADE,
  FOREIGN KEY (ACTION_ID) REFERENCES UM_ACTION (ID) ON DELETE CASCADE
);

CREATE TABLE UM_USER_ROLE
(
  ID             INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  USER_UNIQUE_ID VARCHAR(64)                        NOT NULL,
  ROLE_ID        INTEGER                            NOT NULL,
  FOREIGN KEY (ROLE_ID) REFERENCES UM_ROLE (ID) ON DELETE CASCADE
);

CREATE TABLE UM_GROUP_ROLE
(
  ID              INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  GROUP_UNIQUE_ID VARCHAR(64)                        NOT NULL,
  ROLE_ID         INTEGER                            NOT NULL,
  FOREIGN KEY (ROLE_ID) REFERENCES UM_ROLE (ID) ON DELETE CASCADE
);

CREATE TABLE UM_ROLE_PERMISSION
(
  ID            INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  ROLE_ID       INTEGER                            NOT NULL,
  PERMISSION_ID INTEGER                            NOT NULL,
  FOREIGN KEY (PERMISSION_ID) REFERENCES UM_PERMISSION (ID) ON DELETE CASCADE,
  FOREIGN KEY (ROLE_ID) REFERENCES UM_ROLE (ID) ON DELETE CASCADE
);


CREATE TABLE IDM_USER
(
  ID                INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  USER_ID           VARCHAR(64)                        NOT NULL,
  DOMAIN_ID         INTEGER                            NOT NULL,
  CONNECTOR_TYPE    CHAR(1) DEFAULT 'I'                NOT NULL,
  CONNECTOR_ID      VARCHAR(64)                        NOT NULL,
  CONNECTOR_USER_ID VARCHAR(64)                        NOT NULL,
  STATE             VARCHAR(64)                        NOT NULL
);

CREATE TABLE IDM_GROUP
(
  ID                 INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  GROUP_ID           VARCHAR(64)                        NOT NULL,
  DOMAIN_ID          INTEGER                            NOT NULL,
  CONNECTOR_ID       VARCHAR(64)                        NOT NULL,
  CONNECTOR_GROUP_ID VARCHAR(64)                        NOT NULL
);

CREATE UNIQUE INDEX IDM_ENTITY_INDEX_1
  ON IDM_USER (USER_ID, DOMAIN_ID, CONNECTOR_TYPE, CONNECTOR_ID, CONNECTOR_USER_ID);

CREATE INDEX IDM_ENTITY_INDEX_2
  ON IDM_USER (CONNECTOR_ID, CONNECTOR_USER_ID);

CREATE INDEX IDM_ENTITY_INDEX_3
  ON IDM_USER (USER_ID);

CREATE UNIQUE INDEX IDM_ENTITY_INDEX_4
  ON IDM_GROUP (GROUP_ID, DOMAIN_ID, CONNECTOR_ID, CONNECTOR_GROUP_ID);

CREATE INDEX IDM_ENTITY_INDEX_5
  ON IDM_GROUP (CONNECTOR_ID, CONNECTOR_GROUP_ID);

CREATE INDEX IDM_ENTITY_INDEX_6
  ON IDM_GROUP (GROUP_ID);

CREATE TABLE IDM_USER_GROUP_MAPPING
(
  ID        INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
  USER_ID   VARCHAR(64)                        NOT NULL,
  GROUP_ID  VARCHAR(64)                        NOT NULL,
  DOMAIN_ID INTEGER                            NOT NULL
);

CREATE TABLE IF NOT EXISTS IDN_RECOVERY_DATA (
  USER_UNIQUE_ID VARCHAR(64) NOT NULL,
  CODE VARCHAR(255) NOT NULL,
  SCENARIO VARCHAR(255) NOT NULL,
  STEP VARCHAR(127) NOT NULL,
  TIME_CREATED TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  REMAINING_SETS VARCHAR(2500) DEFAULT NULL,
  PRIMARY KEY(USER_UNIQUE_ID,SCENARIO,STEP),
  UNIQUE(CODE)
);


INSERT INTO UM_ATTRIBUTES (ATTR_NAME)
VALUES ('uid'),
  ('cn'),
  ('givenName'),
  ('sn'),
  ('middlename'),
  ('honorificPrefix'),
  ('honorificSuffix'),
  ('displayName'),
  ('nickName'),
  ('title'),
  ('gender'),
  ('dateOfBirth'),
  ('mail'),
  ('telephoneNumber'),
  ('otherPhone'),
  ('mobile'),
  ('im'),
  ('streetAddress'),
  ('localityName'),
  ('region'),
  ('postalcode'),
  ('country'),
  ('role'),
  ('organization'),
  ('resourceType'),
  ('createdDate'),
  ('lastModifiedDate'),
  ('location'),
  ('version'),
  ('challengeQuestionUris'),
  ('challengeQuestion1'),
  ('challengeQuestion2'),
  ('challengeQuestion3'),
  ('accountLock'),
  ('accountDisable');

-- INSERT INTO UM_PASSWORD (PASSWORD, USER_UNIQUE_ID)
-- VALUES ('3opCozpRixH6BvSXyr0513v1nyFWpdcQy7F6r6P/LFE=', '5c724592-3506-46ec-9286-f611c2a098dc');
--
-- INSERT INTO UM_PASSWORD_INFO (PASSWORD_SALT, HASH_ALGO, ITERATION_COUNT, KEY_LENGTH, USER_ID)
-- VALUES ('1ff1188e-f1bf-11e5-9ce9-5e5517507c66', 'SHA256', 4096, 256, (SELECT ID
--                                                                       FROM UM_PASSWORD
--                                                                       WHERE USER_UNIQUE_ID =
--                                                                             '5c724592-3506-46ec-9286-f611c2a098dc'));
--
-- INSERT INTO UM_USER (USER_UNIQUE_ID)
-- VALUES ('12551249-ca7b-4790-bf40-67304dcc7e5f');
--
-- INSERT INTO UM_USER_ATTRIBUTES (ATTR_ID, ATTR_VALUE, USER_ID)
-- VALUES ((SELECT ID FROM UM_ATTRIBUTES WHERE ATTR_NAME = 'uid'),
--         'admin',
--         (SELECT ID FROM UM_USER WHERE USER_UNIQUE_ID= '12551249-ca7b-4790-bf40-67304dcc7e5f')),
--   ((SELECT ID FROM UM_ATTRIBUTES WHERE ATTR_NAME = 'givenName'),
--    'John',
--    (SELECT ID FROM UM_USER WHERE USER_UNIQUE_ID= '12551249-ca7b-4790-bf40-67304dcc7e5f')),
--   ((SELECT ID FROM UM_ATTRIBUTES WHERE ATTR_NAME = 'sn'),
--    'Doe',
--    (SELECT ID FROM UM_USER WHERE USER_UNIQUE_ID= '12551249-ca7b-4790-bf40-67304dcc7e5f')),
--   ((SELECT ID FROM UM_ATTRIBUTES WHERE ATTR_NAME = 'createdDate'),
--    '2016-12-07T18:19:59Z',
--    (SELECT ID FROM UM_USER WHERE USER_UNIQUE_ID= '12551249-ca7b-4790-bf40-67304dcc7e5f')),
--   ((SELECT ID FROM UM_ATTRIBUTES WHERE ATTR_NAME = 'lastModifiedDate'),
--    '2016-12-07T18:19:59Z',
--    (SELECT ID FROM UM_USER WHERE USER_UNIQUE_ID= '12551249-ca7b-4790-bf40-67304dcc7e5f')),
--   ((SELECT ID FROM UM_ATTRIBUTES WHERE ATTR_NAME = 'resourceType'),
--    'User',
--    (SELECT ID FROM UM_USER WHERE USER_UNIQUE_ID= '12551249-ca7b-4790-bf40-67304dcc7e5f'));
--
-- INSERT INTO IDM_USER (USER_ID, DOMAIN_ID, CONNECTOR_TYPE, CONNECTOR_ID, CONNECTOR_USER_ID) VALUES
--   ('0a8faaa2-4091-4000-bdd4-9c417798e47c', '1', 'I', 'JDBCIS1', '12551249-ca7b-4790-bf40-67304dcc7e5f'),
--   ('0a8faaa2-4091-4000-bdd4-9c417798e47c', '1', 'C', 'JDBCCS1', '5c724592-3506-46ec-9286-f611c2a098dc');
